{"0": {
    "doc": "nodetool-base Documentation",
    "title": "nodetool-base Documentation",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"1": {
    "doc": "nodetool-base Documentation",
    "title": "Available Nodes",
    "content": ". | nodetool.audio | nodetool.boolean | nodetool.code | nodetool.constant | nodetool.control | nodetool.date | nodetool.dictionary | nodetool.group | nodetool.image | nodetool.input | nodetool.json | nodetool.list | nodetool.math | nodetool.os | nodetool.output | nodetool.text | nodetool.video | . ",
    "url": "/#available-nodes",
    
    "relUrl": "/#available-nodes"
  },"2": {
    "doc": "nodetool-base Documentation",
    "title": "Navigation",
    "content": "Use the sidebar navigation to explore detailed documentation for each node. ",
    "url": "/#navigation",
    
    "relUrl": "/#navigation"
  },"3": {
    "doc": "Nodes",
    "title": "Nodes",
    "content": "This section contains documentation for all available nodes. ",
    "url": "/nodes",
    
    "relUrl": "/nodes"
  },"4": {
    "doc": "nodetool.audio",
    "title": "nodetool.nodes.nodetool.audio",
    "content": " ",
    "url": "/nodetool_audio.html#nodetoolnodesnodetoolaudio",
    
    "relUrl": "/nodetool_audio.html#nodetoolnodesnodetoolaudio"
  },"5": {
    "doc": "nodetool.audio",
    "title": "SaveAudio",
    "content": "Save an audio file to a specified folder. Use cases: . | Save generated audio files with timestamps | Organize outputs into specific folders | Create backups of generated audio | . Tags: audio, folder, name . Fields: . | audio (AudioRef) | folder: The folder to save the audio file to. (FolderRef) | name: The name of the audio file. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_audio.html#saveaudio",
    
    "relUrl": "/nodetool_audio.html#saveaudio"
  },"6": {
    "doc": "nodetool.audio",
    "title": "required_inputs",
    "content": "Args: . ",
    "url": "/nodetool_audio.html#required_inputs",
    
    "relUrl": "/nodetool_audio.html#required_inputs"
  },"7": {
    "doc": "nodetool.audio",
    "title": "nodetool.audio",
    "content": " ",
    "url": "/nodetool_audio.html",
    
    "relUrl": "/nodetool_audio.html"
  },"8": {
    "doc": "nodetool.boolean",
    "title": "nodetool.nodes.nodetool.boolean",
    "content": " ",
    "url": "/nodetool_boolean.html#nodetoolnodesnodetoolboolean",
    
    "relUrl": "/nodetool_boolean.html#nodetoolnodesnodetoolboolean"
  },"9": {
    "doc": "nodetool.boolean",
    "title": "All",
    "content": "Checks if all boolean values in a list are True. Use cases: . | Ensure all conditions in a set are met | Implement comprehensive checks | Validate multiple criteria simultaneously | . Tags: boolean, all, check, logic, condition, flow-control, branch . Fields: . | values: List of boolean values to check (list[bool]) | . ",
    "url": "/nodetool_boolean.html#all",
    
    "relUrl": "/nodetool_boolean.html#all"
  },"10": {
    "doc": "nodetool.boolean",
    "title": "Compare",
    "content": "Compares two values using a specified comparison operator. Use cases: . | Implement decision points in workflows | Filter data based on specific criteria | Create dynamic thresholds or limits | . Tags: compare, condition, logic . Fields: . | a: First value to compare (Any) | b: Second value to compare (Any) | comparison: Comparison operator to use (Comparison) | . ",
    "url": "/nodetool_boolean.html#compare",
    
    "relUrl": "/nodetool_boolean.html#compare"
  },"11": {
    "doc": "nodetool.boolean",
    "title": "ConditionalSwitch",
    "content": "Performs a conditional check on a boolean input and returns a value based on the result. Use cases: . | Implement conditional logic in workflows | Create dynamic branches in workflows | Implement decision points in workflows | . Tags: if, condition, flow-control, branch, true, false, switch, toggle . Fields: . | condition: The condition to check (bool) | if_true: The value to return if the condition is true (Any) | if_false: The value to return if the condition is false (Any) | . ",
    "url": "/nodetool_boolean.html#conditionalswitch",
    
    "relUrl": "/nodetool_boolean.html#conditionalswitch"
  },"12": {
    "doc": "nodetool.boolean",
    "title": "IsIn",
    "content": "Checks if a value is present in a list of options. Use cases: . | Validate input against a set of allowed values | Implement category or group checks | Filter data based on inclusion criteria | . Tags: membership, contains, check . Fields: . | value: The value to check for membership (Any) | options: The list of options to check against (list[typing.Any]) | . ",
    "url": "/nodetool_boolean.html#isin",
    
    "relUrl": "/nodetool_boolean.html#isin"
  },"13": {
    "doc": "nodetool.boolean",
    "title": "IsNone",
    "content": "Checks if a value is None. Use cases: . | Validate input presence | Handle optional parameters | Implement null checks in data processing | . Tags: null, none, check . Fields: . | value: The value to check for None (Any) | . ",
    "url": "/nodetool_boolean.html#isnone",
    
    "relUrl": "/nodetool_boolean.html#isnone"
  },"14": {
    "doc": "nodetool.boolean",
    "title": "LogicalOperator",
    "content": "Performs logical operations on two boolean inputs. Use cases: . | Combine multiple conditions in decision-making | Implement complex logical rules in workflows | Create advanced filters or triggers | . Tags: boolean, logic, operator, condition, flow-control, branch, else, true, false, switch, toggle . Fields: . | a: First boolean input (bool) | b: Second boolean input (bool) | operation: Logical operation to perform (BooleanOperation) | . ",
    "url": "/nodetool_boolean.html#logicaloperator",
    
    "relUrl": "/nodetool_boolean.html#logicaloperator"
  },"15": {
    "doc": "nodetool.boolean",
    "title": "Not",
    "content": "Performs logical NOT operation on a boolean input. Use cases: . | Invert a condition’s result | Implement toggle functionality | Create opposite logic branches | . Tags: boolean, logic, not, invert, !, negation, condition, else, true, false, switch, toggle, flow-control, branch . Fields: . | value: Boolean input to negate (bool) | . ",
    "url": "/nodetool_boolean.html#not",
    
    "relUrl": "/nodetool_boolean.html#not"
  },"16": {
    "doc": "nodetool.boolean",
    "title": "Some",
    "content": "Checks if any boolean value in a list is True. Use cases: . | Check if at least one condition in a set is met | Implement optional criteria checks | Create flexible validation rules | . Tags: boolean, any, check, logic, condition, flow-control, branch . Fields: . | values: List of boolean values to check (list[bool]) | . ",
    "url": "/nodetool_boolean.html#some",
    
    "relUrl": "/nodetool_boolean.html#some"
  },"17": {
    "doc": "nodetool.boolean",
    "title": "nodetool.boolean",
    "content": " ",
    "url": "/nodetool_boolean.html",
    
    "relUrl": "/nodetool_boolean.html"
  },"18": {
    "doc": "nodetool.code",
    "title": "nodetool.nodes.nodetool.code",
    "content": " ",
    "url": "/nodetool_code.html#nodetoolnodesnodetoolcode",
    
    "relUrl": "/nodetool_code.html#nodetoolnodesnodetoolcode"
  },"19": {
    "doc": "nodetool.code",
    "title": "EvaluateExpression",
    "content": "Evaluates a Python expression with safety restrictions. Use cases: . | Calculate values dynamically | Transform data with simple expressions | Quick data validation | . IMPORTANT: Only enabled in non-production environments . Tags: python, expression, evaluate . Fields: . | expression: Python expression to evaluate. Variables are available as locals. (str) | variables: Variables available to the expression (dict[str, typing.Any]) | . ",
    "url": "/nodetool_code.html#evaluateexpression",
    
    "relUrl": "/nodetool_code.html#evaluateexpression"
  },"20": {
    "doc": "nodetool.code",
    "title": "ExecutePython",
    "content": "Executes Python code with safety restrictions. Use cases: . | Run custom data transformations | Prototype node functionality | Debug and testing workflows | . IMPORTANT: Only enabled in non-production environments . Tags: python, code, execute . Fields: . | code: Python code to execute. Input variables are available as locals. Assign the desired output to the ‘result’ variable. (str) | inputs: Input variables available to the code as locals. (dict[str, typing.Any]) | . ",
    "url": "/nodetool_code.html#executepython",
    
    "relUrl": "/nodetool_code.html#executepython"
  },"21": {
    "doc": "nodetool.code",
    "title": "nodetool.code",
    "content": " ",
    "url": "/nodetool_code.html",
    
    "relUrl": "/nodetool_code.html"
  },"22": {
    "doc": "nodetool.constant",
    "title": "nodetool.nodes.nodetool.constant",
    "content": " ",
    "url": "/nodetool_constant.html#nodetoolnodesnodetoolconstant",
    
    "relUrl": "/nodetool_constant.html#nodetoolnodesnodetoolconstant"
  },"23": {
    "doc": "nodetool.constant",
    "title": "Audio",
    "content": "Represents an audio file constant in the workflow. Use cases: . | Provide a fixed audio input for audio processing nodes | Reference a specific audio file in the workflow | Set default audio for testing or demonstration purposes | . Tags: audio, file, mp3, wav . Fields: . | value (AudioRef) | . ",
    "url": "/nodetool_constant.html#audio",
    
    "relUrl": "/nodetool_constant.html#audio"
  },"24": {
    "doc": "nodetool.constant",
    "title": "Bool",
    "content": "Represents a boolean constant in the workflow. Use cases: . | Control flow decisions in conditional nodes | Toggle features or behaviors in the workflow | Set default boolean values for configuration | . Tags: boolean, logic, flag . Fields: . | value (bool) | . ",
    "url": "/nodetool_constant.html#bool",
    
    "relUrl": "/nodetool_constant.html#bool"
  },"25": {
    "doc": "nodetool.constant",
    "title": "Constant",
    "content": "Fields: . ",
    "url": "/nodetool_constant.html#constant",
    
    "relUrl": "/nodetool_constant.html#constant"
  },"26": {
    "doc": "nodetool.constant",
    "title": "DataFrame",
    "content": "Represents a fixed DataFrame constant in the workflow. Use cases: . | Provide static data for analysis or processing | Define lookup tables or reference data | Set sample data for testing or demonstration | . Tags: table, data, dataframe, pandas . Fields: . | value (DataframeRef) | . ",
    "url": "/nodetool_constant.html#dataframe",
    
    "relUrl": "/nodetool_constant.html#dataframe"
  },"27": {
    "doc": "nodetool.constant",
    "title": "Date",
    "content": "Make a date object from year, month, day. Tags: date, make, create . Fields: . | year: Year of the date (int) | month: Month of the date (int) | day: Day of the date (int) | . ",
    "url": "/nodetool_constant.html#date",
    
    "relUrl": "/nodetool_constant.html#date"
  },"28": {
    "doc": "nodetool.constant",
    "title": "DateTime",
    "content": "Make a datetime object from year, month, day, hour, minute, second. Tags: datetime, make, create . Fields: . | year: Year of the datetime (int) | month: Month of the datetime (int) | day: Day of the datetime (int) | hour: Hour of the datetime (int) | minute: Minute of the datetime (int) | second: Second of the datetime (int) | microsecond: Microsecond of the datetime (int) | tzinfo: Timezone of the datetime (str) | utc_offset: UTC offset of the datetime (int) | . ",
    "url": "/nodetool_constant.html#datetime",
    
    "relUrl": "/nodetool_constant.html#datetime"
  },"29": {
    "doc": "nodetool.constant",
    "title": "Dict",
    "content": "Represents a dictionary constant in the workflow. Use cases: . | Store configuration settings | Provide structured data inputs | Define parameter sets for other nodes | . Tags: dictionary, key-value, mapping . Fields: . | value (dict[str, typing.Any]) | . ",
    "url": "/nodetool_constant.html#dict",
    
    "relUrl": "/nodetool_constant.html#dict"
  },"30": {
    "doc": "nodetool.constant",
    "title": "Document",
    "content": "Represents a document constant in the workflow. Tags: document, pdf, word, docx . Fields: . | value (DocumentRef) | . ",
    "url": "/nodetool_constant.html#document",
    
    "relUrl": "/nodetool_constant.html#document"
  },"31": {
    "doc": "nodetool.constant",
    "title": "Float",
    "content": "Represents a floating-point number constant in the workflow. Use cases: . | Set numerical parameters for calculations | Define thresholds or limits | Provide fixed numerical inputs for processing | . Tags: number, decimal, float . Fields: . | value (float) | . ",
    "url": "/nodetool_constant.html#float",
    
    "relUrl": "/nodetool_constant.html#float"
  },"32": {
    "doc": "nodetool.constant",
    "title": "Image",
    "content": "Represents an image file constant in the workflow. Use cases: . | Provide a fixed image input for image processing nodes | Reference a specific image file in the workflow | Set default image for testing or demonstration purposes | . Tags: picture, photo, image . Fields: . | value (ImageRef) | . ",
    "url": "/nodetool_constant.html#image",
    
    "relUrl": "/nodetool_constant.html#image"
  },"33": {
    "doc": "nodetool.constant",
    "title": "Integer",
    "content": "Represents an integer constant in the workflow. Use cases: . | Set numerical parameters for calculations | Define counts, indices, or sizes | Provide fixed numerical inputs for processing | . Tags: number, integer, whole . Fields: . | value (int) | . ",
    "url": "/nodetool_constant.html#integer",
    
    "relUrl": "/nodetool_constant.html#integer"
  },"34": {
    "doc": "nodetool.constant",
    "title": "JSON",
    "content": "Represents a JSON constant in the workflow. Tags: json, object, dictionary . Fields: . | value (JSONRef) | . ",
    "url": "/nodetool_constant.html#json",
    
    "relUrl": "/nodetool_constant.html#json"
  },"35": {
    "doc": "nodetool.constant",
    "title": "List",
    "content": "Represents a list constant in the workflow. Use cases: . | Store multiple values of the same type | Provide ordered data inputs | Define sequences for iteration in other nodes | . Tags: array, sequence, collection . Fields: . | value (list[typing.Any]) | . ",
    "url": "/nodetool_constant.html#list",
    
    "relUrl": "/nodetool_constant.html#list"
  },"36": {
    "doc": "nodetool.constant",
    "title": "String",
    "content": "Represents a string constant in the workflow. Use cases: . | Provide fixed text inputs for processing | Define labels, identifiers, or names | Set default text values for configuration | . Tags: text, string, characters . Fields: . | value (str) | . ",
    "url": "/nodetool_constant.html#string",
    
    "relUrl": "/nodetool_constant.html#string"
  },"37": {
    "doc": "nodetool.constant",
    "title": "Video",
    "content": "Represents a video file constant in the workflow. Use cases: . | Provide a fixed video input for video processing nodes | Reference a specific video file in the workflow | Set default video for testing or demonstration purposes | . Tags: video, movie, mp4, file . Fields: . | value (VideoRef) | . ",
    "url": "/nodetool_constant.html#video",
    
    "relUrl": "/nodetool_constant.html#video"
  },"38": {
    "doc": "nodetool.constant",
    "title": "nodetool.constant",
    "content": " ",
    "url": "/nodetool_constant.html",
    
    "relUrl": "/nodetool_constant.html"
  },"39": {
    "doc": "nodetool.control",
    "title": "nodetool.nodes.nodetool.control",
    "content": " ",
    "url": "/nodetool_control.html#nodetoolnodesnodetoolcontrol",
    
    "relUrl": "/nodetool_control.html#nodetoolnodesnodetoolcontrol"
  },"40": {
    "doc": "nodetool.control",
    "title": "If",
    "content": "Conditionally executes one of two branches based on a condition. Use cases: . | Branch workflow based on conditions | Handle different cases in data processing | Implement decision logic | . Tags: control, flow, condition, logic, else, true, false, switch, toggle, flow-control . Fields: . | condition: The condition to evaluate (bool) | value: The value to pass to the next node (Any) | . ",
    "url": "/nodetool_control.html#if",
    
    "relUrl": "/nodetool_control.html#if"
  },"41": {
    "doc": "nodetool.control",
    "title": "nodetool.control",
    "content": " ",
    "url": "/nodetool_control.html",
    
    "relUrl": "/nodetool_control.html"
  },"42": {
    "doc": "nodetool.date",
    "title": "nodetool.nodes.nodetool.date",
    "content": " ",
    "url": "/nodetool_date.html#nodetoolnodesnodetooldate",
    
    "relUrl": "/nodetool_date.html#nodetoolnodesnodetooldate"
  },"43": {
    "doc": "nodetool.date",
    "title": "AddTimeDelta",
    "content": "Add or subtract time from a datetime. Use cases: . | Calculate future/past dates | Generate date ranges | . Tags: datetime, add, subtract . Fields: . | input_datetime: Starting datetime (Datetime) | days: Number of days to add (negative to subtract) (int) | hours: Number of hours to add (negative to subtract) (int) | minutes: Number of minutes to add (negative to subtract) (int) | . ",
    "url": "/nodetool_date.html#addtimedelta",
    
    "relUrl": "/nodetool_date.html#addtimedelta"
  },"44": {
    "doc": "nodetool.date",
    "title": "DateDifference",
    "content": "Calculate the difference between two dates. Use cases: . | Calculate time periods | Measure durations | . Tags: datetime, difference, duration . Fields: . | start_date: Start datetime (Datetime) | end_date: End datetime (Datetime) | . ",
    "url": "/nodetool_date.html#datedifference",
    
    "relUrl": "/nodetool_date.html#datedifference"
  },"45": {
    "doc": "nodetool.date",
    "title": "DateFormat",
    "content": " ",
    "url": "/nodetool_date.html#dateformat",
    
    "relUrl": "/nodetool_date.html#dateformat"
  },"46": {
    "doc": "nodetool.date",
    "title": "DateRange",
    "content": "Generate a list of dates between start and end dates. Use cases: . | Generate date sequences | Create date-based iterations | . Tags: datetime, range, list . Fields: . | start_date: Start date of the range (Datetime) | end_date: End date of the range (Datetime) | step_days: Number of days between each date (int) | . ",
    "url": "/nodetool_date.html#daterange",
    
    "relUrl": "/nodetool_date.html#daterange"
  },"47": {
    "doc": "nodetool.date",
    "title": "DateToDatetime",
    "content": "Convert a Date object to a Datetime object. Tags: date, datetime, convert . Fields: . | input_date: Date to convert (Date) | . ",
    "url": "/nodetool_date.html#datetodatetime",
    
    "relUrl": "/nodetool_date.html#datetodatetime"
  },"48": {
    "doc": "nodetool.date",
    "title": "DatetimeToDate",
    "content": "Convert a Datetime object to a Date object. Tags: date, datetime, convert . Fields: . | input_datetime: Datetime to convert (Datetime) | . ",
    "url": "/nodetool_date.html#datetimetodate",
    
    "relUrl": "/nodetool_date.html#datetimetodate"
  },"49": {
    "doc": "nodetool.date",
    "title": "DaysAgo",
    "content": "Get datetime from specified days ago. Tags: datetime, past, days . Fields: . | days: Number of days ago (int) | . ",
    "url": "/nodetool_date.html#daysago",
    
    "relUrl": "/nodetool_date.html#daysago"
  },"50": {
    "doc": "nodetool.date",
    "title": "DaysFromNow",
    "content": "Get datetime specified days in the future. Tags: datetime, future, days . Fields: . | days: Number of days in the future (int) | . ",
    "url": "/nodetool_date.html#daysfromnow",
    
    "relUrl": "/nodetool_date.html#daysfromnow"
  },"51": {
    "doc": "nodetool.date",
    "title": "EndOfDay",
    "content": "Get the datetime set to the end of the day (23:59:59). Tags: datetime, day, end . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#endofday",
    
    "relUrl": "/nodetool_date.html#endofday"
  },"52": {
    "doc": "nodetool.date",
    "title": "EndOfMonth",
    "content": "Get the datetime set to the last day of the month. Tags: datetime, month, end . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#endofmonth",
    
    "relUrl": "/nodetool_date.html#endofmonth"
  },"53": {
    "doc": "nodetool.date",
    "title": "EndOfWeek",
    "content": "Get the datetime set to the last day of the week (Sunday by default). Tags: datetime, week, end . Fields: . | input_datetime: Input datetime (Datetime) | start_monday: Consider Monday as start of week (False for Sunday) (bool) | . ",
    "url": "/nodetool_date.html#endofweek",
    
    "relUrl": "/nodetool_date.html#endofweek"
  },"54": {
    "doc": "nodetool.date",
    "title": "EndOfYear",
    "content": "Get the datetime set to the last day of the year. Tags: datetime, year, end . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#endofyear",
    
    "relUrl": "/nodetool_date.html#endofyear"
  },"55": {
    "doc": "nodetool.date",
    "title": "FormatDateTime",
    "content": "Convert a datetime object to a formatted string. Use cases: . | Standardize date formats | Prepare dates for different systems | . Tags: datetime, format, convert . Fields: . | input_datetime: Datetime object to format (Datetime) | output_format: Desired output format (DateFormat) | . ",
    "url": "/nodetool_date.html#formatdatetime",
    
    "relUrl": "/nodetool_date.html#formatdatetime"
  },"56": {
    "doc": "nodetool.date",
    "title": "GetQuarter",
    "content": "Get the quarter number and start/end dates for a given datetime. Use cases: . | Financial reporting periods | Quarterly analytics | . Tags: datetime, quarter, period . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#getquarter",
    
    "relUrl": "/nodetool_date.html#getquarter"
  },"57": {
    "doc": "nodetool.date",
    "title": "GetWeekday",
    "content": "Get the weekday name or number from a datetime. Use cases: . | Get day names for scheduling | Filter events by weekday | . Tags: datetime, weekday, name . Fields: . | input_datetime: Input datetime (Datetime) | as_name: Return weekday name instead of number (0-6) (bool) | . ",
    "url": "/nodetool_date.html#getweekday",
    
    "relUrl": "/nodetool_date.html#getweekday"
  },"58": {
    "doc": "nodetool.date",
    "title": "HoursAgo",
    "content": "Get datetime from specified hours ago. Tags: datetime, past, hours . Fields: . | hours: Number of hours ago (int) | . ",
    "url": "/nodetool_date.html#hoursago",
    
    "relUrl": "/nodetool_date.html#hoursago"
  },"59": {
    "doc": "nodetool.date",
    "title": "HoursFromNow",
    "content": "Get datetime specified hours in the future. Tags: datetime, future, hours . Fields: . | hours: Number of hours in the future (int) | . ",
    "url": "/nodetool_date.html#hoursfromnow",
    
    "relUrl": "/nodetool_date.html#hoursfromnow"
  },"60": {
    "doc": "nodetool.date",
    "title": "IsDateInRange",
    "content": "Check if a date falls within a specified range. Use cases: . | Validate date ranges | Filter date-based data | . Tags: datetime, range, check . Fields: . | check_date: Date to check (Datetime) | start_date: Start of date range (Datetime) | end_date: End of date range (Datetime) | inclusive: Include start and end dates in range (bool) | . ",
    "url": "/nodetool_date.html#isdateinrange",
    
    "relUrl": "/nodetool_date.html#isdateinrange"
  },"61": {
    "doc": "nodetool.date",
    "title": "MonthsAgo",
    "content": "Get datetime from specified months ago. Tags: datetime, past, months . Fields: . | months: Number of months ago (int) | . ",
    "url": "/nodetool_date.html#monthsago",
    
    "relUrl": "/nodetool_date.html#monthsago"
  },"62": {
    "doc": "nodetool.date",
    "title": "MonthsFromNow",
    "content": "Get datetime specified months in the future. Tags: datetime, future, months . Fields: . | months: Number of months in the future (int) | . ",
    "url": "/nodetool_date.html#monthsfromnow",
    
    "relUrl": "/nodetool_date.html#monthsfromnow"
  },"63": {
    "doc": "nodetool.date",
    "title": "Now",
    "content": "Get the current date and time. Tags: datetime, current, now . Fields: . ",
    "url": "/nodetool_date.html#now",
    
    "relUrl": "/nodetool_date.html#now"
  },"64": {
    "doc": "nodetool.date",
    "title": "ParseDate",
    "content": "Parse a date string into components. Tags: date, parse, format . Fields: . | date_string: The date string to parse (str) | input_format: Format of the input date string (DateFormat) | . ",
    "url": "/nodetool_date.html#parsedate",
    
    "relUrl": "/nodetool_date.html#parsedate"
  },"65": {
    "doc": "nodetool.date",
    "title": "ParseDateTime",
    "content": "Parse a date/time string into components. Use cases: . | Extract date components from strings | Convert between date formats | . Tags: datetime, parse, format . Fields: . | datetime_string: The datetime string to parse (str) | input_format: Format of the input datetime string (DateFormat) | . ",
    "url": "/nodetool_date.html#parsedatetime",
    
    "relUrl": "/nodetool_date.html#parsedatetime"
  },"66": {
    "doc": "nodetool.date",
    "title": "StartOfDay",
    "content": "Get the datetime set to the start of the day (00:00:00). Tags: datetime, day, start . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#startofday",
    
    "relUrl": "/nodetool_date.html#startofday"
  },"67": {
    "doc": "nodetool.date",
    "title": "StartOfMonth",
    "content": "Get the datetime set to the first day of the month. Tags: datetime, month, start . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#startofmonth",
    
    "relUrl": "/nodetool_date.html#startofmonth"
  },"68": {
    "doc": "nodetool.date",
    "title": "StartOfWeek",
    "content": "Get the datetime set to the first day of the week (Monday by default). Tags: datetime, week, start . Fields: . | input_datetime: Input datetime (Datetime) | start_monday: Consider Monday as start of week (False for Sunday) (bool) | . ",
    "url": "/nodetool_date.html#startofweek",
    
    "relUrl": "/nodetool_date.html#startofweek"
  },"69": {
    "doc": "nodetool.date",
    "title": "StartOfYear",
    "content": "Get the datetime set to the first day of the year. Tags: datetime, year, start . Fields: . | input_datetime: Input datetime (Datetime) | . ",
    "url": "/nodetool_date.html#startofyear",
    
    "relUrl": "/nodetool_date.html#startofyear"
  },"70": {
    "doc": "nodetool.date",
    "title": "Today",
    "content": "Get the current date. Tags: date, today, now . Fields: . ",
    "url": "/nodetool_date.html#today",
    
    "relUrl": "/nodetool_date.html#today"
  },"71": {
    "doc": "nodetool.date",
    "title": "nodetool.date",
    "content": " ",
    "url": "/nodetool_date.html",
    
    "relUrl": "/nodetool_date.html"
  },"72": {
    "doc": "nodetool.dictionary",
    "title": "nodetool.nodes.nodetool.dictionary",
    "content": " ",
    "url": "/nodetool_dictionary.html#nodetoolnodesnodetooldictionary",
    
    "relUrl": "/nodetool_dictionary.html#nodetoolnodesnodetooldictionary"
  },"73": {
    "doc": "nodetool.dictionary",
    "title": "ArgMax",
    "content": "Returns the label associated with the highest value in a dictionary. Use cases: . | Get the most likely class from classification probabilities | Find the category with highest score | Identify the winner in a voting/ranking system | . Tags: dictionary, maximum, label, argmax . Fields: . | scores: Dictionary mapping labels to their corresponding scores/values (dict[str, float]) | . ",
    "url": "/nodetool_dictionary.html#argmax",
    
    "relUrl": "/nodetool_dictionary.html#argmax"
  },"74": {
    "doc": "nodetool.dictionary",
    "title": "Combine",
    "content": "Merges two dictionaries, with second dictionary values taking precedence. Use cases: . | Combine default and custom configurations | Merge partial updates with existing data | Create aggregate data structures | . Tags: dictionary, merge, update, +, add, concatenate . Fields: . | dict_a (dict[str, typing.Any]) | dict_b (dict[str, typing.Any]) | . ",
    "url": "/nodetool_dictionary.html#combine",
    
    "relUrl": "/nodetool_dictionary.html#combine"
  },"75": {
    "doc": "nodetool.dictionary",
    "title": "Filter",
    "content": "Creates a new dictionary with only specified keys from the input. Use cases: . | Extract relevant fields from a larger data structure | Implement data access controls | Prepare specific data subsets for processing | . Tags: dictionary, filter, select . Fields: . | dictionary (dict[str, typing.Any]) | keys (list[str]) | . ",
    "url": "/nodetool_dictionary.html#filter",
    
    "relUrl": "/nodetool_dictionary.html#filter"
  },"76": {
    "doc": "nodetool.dictionary",
    "title": "GetValue",
    "content": "Retrieves a value from a dictionary using a specified key. Use cases: . | Access a specific item in a configuration dictionary | Retrieve a value from a parsed JSON object | Extract a particular field from a data structure | . Tags: dictionary, get, value, key . Fields: . | dictionary (dict[str, typing.Any]) | key (str) | default (Any) | . ",
    "url": "/nodetool_dictionary.html#getvalue",
    
    "relUrl": "/nodetool_dictionary.html#getvalue"
  },"77": {
    "doc": "nodetool.dictionary",
    "title": "MakeDictionary",
    "content": "Creates a simple dictionary with up to three key-value pairs. Use cases: . | Create configuration entries | Initialize simple data structures | Build basic key-value mappings | . Tags: dictionary, create, simple . Fields: . ",
    "url": "/nodetool_dictionary.html#makedictionary",
    
    "relUrl": "/nodetool_dictionary.html#makedictionary"
  },"78": {
    "doc": "nodetool.dictionary",
    "title": "ParseJSON",
    "content": "Parses a JSON string into a Python dictionary. Use cases: . | Process API responses | Load configuration files | Deserialize stored data | . Tags: json, parse, dictionary . Fields: . | json_string (str) | . ",
    "url": "/nodetool_dictionary.html#parsejson",
    
    "relUrl": "/nodetool_dictionary.html#parsejson"
  },"79": {
    "doc": "nodetool.dictionary",
    "title": "ReduceDictionaries",
    "content": "Reduces a list of dictionaries into one dictionary based on a specified key field. Use cases: . | Aggregate data by a specific field | Create summary dictionaries from list of records | Combine multiple data points into a single structure | . Tags: dictionary, reduce, aggregate . Fields: . | dictionaries: List of dictionaries to be reduced (list[dict[str, typing.Any]]) | key_field: The field to use as the key in the resulting dictionary (str) | | value_field: Optional field to use as the value. If not specified, the entire dictionary (minus the key field) will be used as the value. (str | None) | . | conflict_resolution: How to handle conflicts when the same key appears multiple times (ConflictResolution) | . ",
    "url": "/nodetool_dictionary.html#reducedictionaries",
    
    "relUrl": "/nodetool_dictionary.html#reducedictionaries"
  },"80": {
    "doc": "nodetool.dictionary",
    "title": "Remove",
    "content": "Removes a key-value pair from a dictionary. Use cases: . | Delete a specific configuration option | Remove sensitive information before processing | Clean up temporary entries in a data structure | . Tags: dictionary, remove, delete . Fields: . | dictionary (dict[str, typing.Any]) | key (str) | . ",
    "url": "/nodetool_dictionary.html#remove",
    
    "relUrl": "/nodetool_dictionary.html#remove"
  },"81": {
    "doc": "nodetool.dictionary",
    "title": "Update",
    "content": "Updates a dictionary with new key-value pairs. Use cases: . | Extend a configuration with additional settings | Add new entries to a cache or lookup table | Merge user input with existing data | . Tags: dictionary, add, update . Fields: . | dictionary (dict[str, typing.Any]) | new_pairs (dict[str, typing.Any]) | . ",
    "url": "/nodetool_dictionary.html#update",
    
    "relUrl": "/nodetool_dictionary.html#update"
  },"82": {
    "doc": "nodetool.dictionary",
    "title": "Zip",
    "content": "Creates a dictionary from parallel lists of keys and values. Use cases: . | Convert separate data columns into key-value pairs | Create lookups from parallel data structures | Transform list data into associative arrays | . Tags: dictionary, create, zip . Fields: . | keys (list[typing.Any]) | values (list[typing.Any]) | . ",
    "url": "/nodetool_dictionary.html#zip",
    
    "relUrl": "/nodetool_dictionary.html#zip"
  },"83": {
    "doc": "nodetool.dictionary",
    "title": "nodetool.dictionary",
    "content": " ",
    "url": "/nodetool_dictionary.html",
    
    "relUrl": "/nodetool_dictionary.html"
  },"84": {
    "doc": "nodetool.group",
    "title": "nodetool.nodes.nodetool.group",
    "content": " ",
    "url": "/nodetool_group.html#nodetoolnodesnodetoolgroup",
    
    "relUrl": "/nodetool_group.html#nodetoolnodesnodetoolgroup"
  },"85": {
    "doc": "nodetool.group",
    "title": "Loop",
    "content": "Loops over a list of items and processes the remaining nodes for each item. Use cases: . | Loop over a list of items and process the nodes inside the group | . Tags: loop, itereate, repeat, for, each, batch . Fields: . | input: The input data to loop over. (Any) | . ",
    "url": "/nodetool_group.html#loop",
    
    "relUrl": "/nodetool_group.html#loop"
  },"86": {
    "doc": "nodetool.group",
    "title": "nodetool.group",
    "content": " ",
    "url": "/nodetool_group.html",
    
    "relUrl": "/nodetool_group.html"
  },"87": {
    "doc": "nodetool.image",
    "title": "nodetool.nodes.nodetool.image",
    "content": " ",
    "url": "/nodetool_image.html#nodetoolnodesnodetoolimage",
    
    "relUrl": "/nodetool_image.html#nodetoolnodesnodetoolimage"
  },"88": {
    "doc": "nodetool.image",
    "title": "BatchToList",
    "content": "Convert an image batch to a list of image references. Use cases: . | Convert comfy batch outputs to list format | . Tags: batch, list, images, processing . Fields: . | batch: The batch of images to convert. (ImageRef) | . ",
    "url": "/nodetool_image.html#batchtolist",
    
    "relUrl": "/nodetool_image.html#batchtolist"
  },"89": {
    "doc": "nodetool.image",
    "title": "Crop",
    "content": "Crop an image to specified coordinates. | Remove unwanted borders from images | Focus on particular subjects within an image | Simplify images by removing distractions | . Tags: image, crop . Fields: . | image: The image to crop. (ImageRef) | left: The left coordinate. (int) | top: The top coordinate. (int) | right: The right coordinate. (int) | bottom: The bottom coordinate. (int) | . ",
    "url": "/nodetool_image.html#crop",
    
    "relUrl": "/nodetool_image.html#crop"
  },"90": {
    "doc": "nodetool.image",
    "title": "Fit",
    "content": "Resize an image to fit within specified dimensions while preserving aspect ratio. | Resize images for online publishing requirements | Preprocess images to uniform sizes for machine learning | Control image display sizes for web development | . Tags: image, resize, fit . Fields: . | image: The image to fit. (ImageRef) | width: Width to fit to. (int) | height: Height to fit to. (int) | . ",
    "url": "/nodetool_image.html#fit",
    
    "relUrl": "/nodetool_image.html#fit"
  },"91": {
    "doc": "nodetool.image",
    "title": "GetMetadata",
    "content": "Get metadata about the input image. Use cases: . | Use width and height for layout calculations | Analyze image properties for processing decisions | Gather information for image cataloging or organization | . Tags: metadata, properties, analysis, information . Fields: . | image: The input image. (ImageRef) | . ",
    "url": "/nodetool_image.html#getmetadata",
    
    "relUrl": "/nodetool_image.html#getmetadata"
  },"92": {
    "doc": "nodetool.image",
    "title": "Paste",
    "content": "Paste one image onto another at specified coordinates. Use cases: . | Add watermarks or logos to images | Combine multiple image elements | Create collages or montages | . Tags: paste, composite, positioning, overlay . Fields: . | image: The image to paste into. (ImageRef) | paste: The image to paste. (ImageRef) | left: The left coordinate. (int) | top: The top coordinate. (int) | . ",
    "url": "/nodetool_image.html#paste",
    
    "relUrl": "/nodetool_image.html#paste"
  },"93": {
    "doc": "nodetool.image",
    "title": "Resize",
    "content": "Change image dimensions to specified width and height. | Preprocess images for machine learning model inputs | Optimize images for faster web page loading | Create uniform image sizes for layouts | . Tags: image, resize . Fields: . | image: The image to resize. (ImageRef) | width: The target width. (int) | height: The target height. (int) | . ",
    "url": "/nodetool_image.html#resize",
    
    "relUrl": "/nodetool_image.html#resize"
  },"94": {
    "doc": "nodetool.image",
    "title": "SaveImage",
    "content": "Save an image to specified folder with customizable name format. Use cases: . | Save generated images with timestamps | Organize outputs into specific folders | Create backups of processed images | . Tags: save, image, folder, naming . Fields: . | image: The image to save. (ImageRef) | folder: The folder to save the image in. (FolderRef) | name: Name of the output file. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_image.html#saveimage",
    
    "relUrl": "/nodetool_image.html#saveimage"
  },"95": {
    "doc": "nodetool.image",
    "title": "required_inputs",
    "content": "Args: . ",
    "url": "/nodetool_image.html#required_inputs",
    
    "relUrl": "/nodetool_image.html#required_inputs"
  },"96": {
    "doc": "nodetool.image",
    "title": "result_for_client",
    "content": "Args: . | result (dict[str, typing.Any]) | . Returns: dict[str, typing.Any] . ",
    "url": "/nodetool_image.html#result_for_client",
    
    "relUrl": "/nodetool_image.html#result_for_client"
  },"97": {
    "doc": "nodetool.image",
    "title": "Scale",
    "content": "Enlarge or shrink an image by a scale factor. | Adjust image dimensions for display galleries | Standardize image sizes for machine learning datasets | Create thumbnail versions of images | . Tags: image, resize, scale . Fields: . | image: The image to scale. (ImageRef) | scale: The scale factor. (float) | . ",
    "url": "/nodetool_image.html#scale",
    
    "relUrl": "/nodetool_image.html#scale"
  },"98": {
    "doc": "nodetool.image",
    "title": "nodetool.image",
    "content": " ",
    "url": "/nodetool_image.html",
    
    "relUrl": "/nodetool_image.html"
  },"99": {
    "doc": "nodetool.input",
    "title": "nodetool.nodes.nodetool.input",
    "content": " ",
    "url": "/nodetool_input.html#nodetoolnodesnodetoolinput",
    
    "relUrl": "/nodetool_input.html#nodetoolnodesnodetoolinput"
  },"100": {
    "doc": "nodetool.input",
    "title": "AudioInput",
    "content": "Audio asset input for workflows. Use cases: . | Load audio files for processing | Analyze sound or speech content | Provide audio input to models | . Tags: input, parameter, audio . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The audio to use as input. (AudioRef) | . ",
    "url": "/nodetool_input.html#audioinput",
    
    "relUrl": "/nodetool_input.html#audioinput"
  },"101": {
    "doc": "nodetool.input",
    "title": "BooleanInput",
    "content": "Boolean parameter input for workflows. Use cases: . | Toggle features on/off | Set binary flags | Control conditional logic | . Tags: input, parameter, boolean, bool . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value (bool) | . ",
    "url": "/nodetool_input.html#booleaninput",
    
    "relUrl": "/nodetool_input.html#booleaninput"
  },"102": {
    "doc": "nodetool.input",
    "title": "ChatInput",
    "content": "Chat message input for workflows. Use cases: . | Accept user prompts or queries | Capture conversational input | Provide instructions to language models | . Tags: input, parameter, chat, message . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The chat message to use as input. (list[nodetool.metadata.types.Message]) | . ",
    "url": "/nodetool_input.html#chatinput",
    
    "relUrl": "/nodetool_input.html#chatinput"
  },"103": {
    "doc": "nodetool.input",
    "title": "CollectionInput",
    "content": "Collection input for workflows. Use cases: . | Select a vector database collection | Specify target collection for indexing | Choose collection for similarity search | . Tags: input, parameter, collection, chroma . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The collection to use as input. (Collection) | . ",
    "url": "/nodetool_input.html#collectioninput",
    
    "relUrl": "/nodetool_input.html#collectioninput"
  },"104": {
    "doc": "nodetool.input",
    "title": "DocumentFileInput",
    "content": "Document file input for workflows. Use cases: . | Load text documents for processing | Analyze document content | Extract text for NLP tasks | Index documents for search | . Tags: input, parameter, document, text . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The path to the document file. (FilePath) | . ",
    "url": "/nodetool_input.html#documentfileinput",
    
    "relUrl": "/nodetool_input.html#documentfileinput"
  },"105": {
    "doc": "nodetool.input",
    "title": "DocumentInput",
    "content": "Document asset input for workflows. Use cases: . | Load documents for processing | Analyze document content | Provide document input to models | . Tags: input, parameter, document . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The document to use as input. (DocumentRef) | . ",
    "url": "/nodetool_input.html#documentinput",
    
    "relUrl": "/nodetool_input.html#documentinput"
  },"106": {
    "doc": "nodetool.input",
    "title": "EnumInput",
    "content": "Enumeration parameter input for workflows. Use cases: . | Select from predefined options | Enforce choice from valid values | Configure categorical parameters | . Tags: input, parameter, enum, options, select . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value (str) | options: Comma-separated list of valid options (str) | . ",
    "url": "/nodetool_input.html#enuminput",
    
    "relUrl": "/nodetool_input.html#enuminput"
  },"107": {
    "doc": "nodetool.input",
    "title": "FloatInput",
    "content": "Float parameter input for workflows. Use cases: . | Specify a numeric value within a defined range | Set thresholds or scaling factors | Configure continuous parameters like opacity or volume | . Tags: input, parameter, float, number . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value (float) | min (float) | max (float) | . ",
    "url": "/nodetool_input.html#floatinput",
    
    "relUrl": "/nodetool_input.html#floatinput"
  },"108": {
    "doc": "nodetool.input",
    "title": "GroupInput",
    "content": "Generic group input for loops. Use cases: . | provides input for a loop | iterates over a group of items | . Tags: input, group, collection, loop . Fields: . ",
    "url": "/nodetool_input.html#groupinput",
    
    "relUrl": "/nodetool_input.html#groupinput"
  },"109": {
    "doc": "nodetool.input",
    "title": "ImageInput",
    "content": "Image asset input for workflows. Use cases: . | Load images for processing or analysis | Provide visual input to models | Select images for manipulation | . Tags: input, parameter, image . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The image to use as input. (ImageRef) | . ",
    "url": "/nodetool_input.html#imageinput",
    
    "relUrl": "/nodetool_input.html#imageinput"
  },"110": {
    "doc": "nodetool.input",
    "title": "IntegerInput",
    "content": "Integer parameter input for workflows. Use cases: . | Specify counts or quantities | Set index values | Configure discrete numeric parameters | . Tags: input, parameter, integer, number . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value (int) | min (int) | max (int) | . ",
    "url": "/nodetool_input.html#integerinput",
    
    "relUrl": "/nodetool_input.html#integerinput"
  },"111": {
    "doc": "nodetool.input",
    "title": "PathInput",
    "content": "Local path input for workflows. Use cases: . | Provide a local path to a file or directory | Specify a file or directory for processing | Load local data for analysis | . Tags: input, parameter, path . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The path to use as input. (FilePath) | . ",
    "url": "/nodetool_input.html#pathinput",
    
    "relUrl": "/nodetool_input.html#pathinput"
  },"112": {
    "doc": "nodetool.input",
    "title": "StringInput",
    "content": "String parameter input for workflows. Use cases: . | Provide text labels or names | Enter search queries | Specify file paths or URLs | . Tags: input, parameter, string, text . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value (str) | . ",
    "url": "/nodetool_input.html#stringinput",
    
    "relUrl": "/nodetool_input.html#stringinput"
  },"113": {
    "doc": "nodetool.input",
    "title": "TextInput",
    "content": "Text content input for workflows. Use cases: . | Load text documents or articles | Process multi-line text content | Analyze large text bodies | . Tags: input, parameter, text . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The text to use as input. (TextRef) | . ",
    "url": "/nodetool_input.html#textinput",
    
    "relUrl": "/nodetool_input.html#textinput"
  },"114": {
    "doc": "nodetool.input",
    "title": "VideoInput",
    "content": "Video asset input for workflows. Use cases: . | Load video files for processing | Analyze video content | Extract frames or audio from videos | . Tags: input, parameter, video . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this input node. (str) | value: The video to use as input. (VideoRef) | . ",
    "url": "/nodetool_input.html#videoinput",
    
    "relUrl": "/nodetool_input.html#videoinput"
  },"115": {
    "doc": "nodetool.input",
    "title": "nodetool.input",
    "content": " ",
    "url": "/nodetool_input.html",
    
    "relUrl": "/nodetool_input.html"
  },"116": {
    "doc": "nodetool.json",
    "title": "nodetool.nodes.nodetool.json",
    "content": " ",
    "url": "/nodetool_json.html#nodetoolnodesnodetooljson",
    
    "relUrl": "/nodetool_json.html#nodetoolnodesnodetooljson"
  },"117": {
    "doc": "nodetool.json",
    "title": "BaseGetJSONPath",
    "content": "Base class for extracting typed data from a JSON object using a path expression. Examples for an object {“a”: {“b”: {“c”: 1}}} “a.b.c” -&gt; 1 “a.b” -&gt; {“c”: 1} “a” -&gt; {“b”: {“c”: 1}} . Use cases: . | Navigate complex JSON structures | Extract specific values from nested JSON with type safety | . Tags: json, path, extract . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | . ",
    "url": "/nodetool_json.html#basegetjsonpath",
    
    "relUrl": "/nodetool_json.html#basegetjsonpath"
  },"118": {
    "doc": "nodetool.json",
    "title": "FilterJSON",
    "content": "Filter JSON array based on a key-value condition. Use cases: . | Filter arrays of objects | Search JSON data | . Tags: json, filter, array . Fields: . | array: Array of JSON objects to filter (list[dict]) | key: Key to filter on (str) | value: Value to match (Any) | . ",
    "url": "/nodetool_json.html#filterjson",
    
    "relUrl": "/nodetool_json.html#filterjson"
  },"119": {
    "doc": "nodetool.json",
    "title": "GetJSONPathBool",
    "content": "Extract a boolean value from a JSON path . Tags: json, path, extract, boolean . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (bool) | . ",
    "url": "/nodetool_json.html#getjsonpathbool",
    
    "relUrl": "/nodetool_json.html#getjsonpathbool"
  },"120": {
    "doc": "nodetool.json",
    "title": "GetJSONPathDict",
    "content": "Extract a dictionary value from a JSON path . Tags: json, path, extract, object . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (dict) | . ",
    "url": "/nodetool_json.html#getjsonpathdict",
    
    "relUrl": "/nodetool_json.html#getjsonpathdict"
  },"121": {
    "doc": "nodetool.json",
    "title": "GetJSONPathFloat",
    "content": "Extract a float value from a JSON path . Tags: json, path, extract, number . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (float) | . ",
    "url": "/nodetool_json.html#getjsonpathfloat",
    
    "relUrl": "/nodetool_json.html#getjsonpathfloat"
  },"122": {
    "doc": "nodetool.json",
    "title": "GetJSONPathInt",
    "content": "Extract an integer value from a JSON path . Tags: json, path, extract, number . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (int) | . ",
    "url": "/nodetool_json.html#getjsonpathint",
    
    "relUrl": "/nodetool_json.html#getjsonpathint"
  },"123": {
    "doc": "nodetool.json",
    "title": "GetJSONPathList",
    "content": "Extract a list value from a JSON path . Tags: json, path, extract, array . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (list) | . ",
    "url": "/nodetool_json.html#getjsonpathlist",
    
    "relUrl": "/nodetool_json.html#getjsonpathlist"
  },"124": {
    "doc": "nodetool.json",
    "title": "GetJSONPathStr",
    "content": "Extract a string value from a JSON path . Tags: json, path, extract, string . Fields: . | data: JSON object to extract from (Any) | path: Path to the desired value (dot notation) (str) | default (str) | . ",
    "url": "/nodetool_json.html#getjsonpathstr",
    
    "relUrl": "/nodetool_json.html#getjsonpathstr"
  },"125": {
    "doc": "nodetool.json",
    "title": "JSONTemplate",
    "content": "Template JSON strings with variable substitution. Example: template: ‘{“name”: “$user”, “age”: $age}’ values: {“user”: “John”, “age”: 30} result: ‘{“name”: “John”, “age”: 30}’ . Use cases: . | Create dynamic JSON payloads | Generate JSON with variable data | Build API request templates | . Tags: json, template, substitute, variables . Fields: . | template: JSON template string with $variable placeholders (str) | values: Dictionary of values to substitute into the template (dict[str, typing.Any]) | . ",
    "url": "/nodetool_json.html#jsontemplate",
    
    "relUrl": "/nodetool_json.html#jsontemplate"
  },"126": {
    "doc": "nodetool.json",
    "title": "ParseDict",
    "content": "Parse a JSON string into a Python dictionary. Use cases: . | Convert JSON API responses to Python dictionaries | Process JSON configuration files | Parse object-like JSON data | . Tags: json, parse, decode, dictionary . Fields: . | json_string: JSON string to parse into a dictionary (str) | . ",
    "url": "/nodetool_json.html#parsedict",
    
    "relUrl": "/nodetool_json.html#parsedict"
  },"127": {
    "doc": "nodetool.json",
    "title": "ParseList",
    "content": "Parse a JSON string into a Python list. Use cases: . | Convert JSON array responses to Python lists | Process JSON data collections | Parse array-like JSON data | . Tags: json, parse, decode, array, list . Fields: . | json_string: JSON string to parse into a list (str) | . ",
    "url": "/nodetool_json.html#parselist",
    
    "relUrl": "/nodetool_json.html#parselist"
  },"128": {
    "doc": "nodetool.json",
    "title": "StringifyJSON",
    "content": "Convert a Python object to a JSON string. Use cases: . | Prepare data for API requests | Save data in JSON format | . Tags: json, stringify, encode . Fields: . | data: Data to convert to JSON (Any) | indent: Number of spaces for indentation (int) | . ",
    "url": "/nodetool_json.html#stringifyjson",
    
    "relUrl": "/nodetool_json.html#stringifyjson"
  },"129": {
    "doc": "nodetool.json",
    "title": "ValidateJSON",
    "content": "Validate JSON data against a schema. Use cases: . | Ensure API payloads match specifications | Validate configuration files | . Tags: json, validate, schema . Fields: . | data: JSON data to validate (Any) | schema: JSON schema for validation (dict) | . ",
    "url": "/nodetool_json.html#validatejson",
    
    "relUrl": "/nodetool_json.html#validatejson"
  },"130": {
    "doc": "nodetool.json",
    "title": "nodetool.json",
    "content": " ",
    "url": "/nodetool_json.html",
    
    "relUrl": "/nodetool_json.html"
  },"131": {
    "doc": "nodetool.list",
    "title": "nodetool.nodes.nodetool.list",
    "content": " ",
    "url": "/nodetool_list.html#nodetoolnodesnodetoollist",
    
    "relUrl": "/nodetool_list.html#nodetoolnodesnodetoollist"
  },"132": {
    "doc": "nodetool.list",
    "title": "Append",
    "content": "Adds a value to the end of a list. Use cases: . | Grow a list dynamically | Add new elements to an existing list | Implement a stack-like structure | . Tags: list, add, insert, extend . Fields: . | values (list[typing.Any]) | value (Any) | . ",
    "url": "/nodetool_list.html#append",
    
    "relUrl": "/nodetool_list.html#append"
  },"133": {
    "doc": "nodetool.list",
    "title": "Average",
    "content": "Calculates the arithmetic mean of a list of numbers. Use cases: . | Find average value | Calculate mean of numeric data | . Tags: list, average, mean, aggregate, math . Fields: . | values (list[float]) | . ",
    "url": "/nodetool_list.html#average",
    
    "relUrl": "/nodetool_list.html#average"
  },"134": {
    "doc": "nodetool.list",
    "title": "Chunk",
    "content": "Splits a list into smaller chunks of specified size. Use cases: . | Batch processing | Pagination | Creating sublists of fixed size | . Tags: list, chunk, split, group . Fields: . | values (list[typing.Any]) | chunk_size (int) | . ",
    "url": "/nodetool_list.html#chunk",
    
    "relUrl": "/nodetool_list.html#chunk"
  },"135": {
    "doc": "nodetool.list",
    "title": "Dedupe",
    "content": "Removes duplicate elements from a list, ensuring uniqueness. Use cases: . | Remove redundant entries | Create a set-like structure | Ensure list elements are unique | . Tags: list, unique, distinct, deduplicate . Fields: . | values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#dedupe",
    
    "relUrl": "/nodetool_list.html#dedupe"
  },"136": {
    "doc": "nodetool.list",
    "title": "Difference",
    "content": "Finds elements that exist in first list but not in second list. Use cases: . | Find unique elements in one list | Remove items present in another list | Identify distinct elements | . Tags: list, set, difference, subtract . Fields: . | list1 (list[typing.Any]) | list2 (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#difference",
    
    "relUrl": "/nodetool_list.html#difference"
  },"137": {
    "doc": "nodetool.list",
    "title": "Extend",
    "content": "Merges one list into another, extending the original list. Use cases: . | Combine multiple lists | Add all elements from one list to another | . Tags: list, merge, concatenate, combine . Fields: . | values (list[typing.Any]) | other_values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#extend",
    
    "relUrl": "/nodetool_list.html#extend"
  },"138": {
    "doc": "nodetool.list",
    "title": "FilterDicts",
    "content": "Filter a list of dictionaries based on a condition. Basic Operators: . | Comparison: &gt;, &lt;, &gt;=, &lt;=, ==, != | Logical: and, or, not | Membership: in, not in | . Example Conditions: . ",
    "url": "/nodetool_list.html#filterdicts",
    
    "relUrl": "/nodetool_list.html#filterdicts"
  },"139": {
    "doc": "nodetool.list",
    "title": "Basic comparisons",
    "content": "age &gt; 30 price &lt;= 100 status == ‘active’ . ",
    "url": "/nodetool_list.html#basic-comparisons",
    
    "relUrl": "/nodetool_list.html#basic-comparisons"
  },"140": {
    "doc": "nodetool.list",
    "title": "Multiple conditions",
    "content": "age &gt; 30 and salary &lt; 50000 (price &gt;= 100) and (price &lt;= 200) department in [‘Sales’, ‘Marketing’] . ",
    "url": "/nodetool_list.html#multiple-conditions",
    
    "relUrl": "/nodetool_list.html#multiple-conditions"
  },"141": {
    "doc": "nodetool.list",
    "title": "String operations",
    "content": "name.str.startswith(‘J’) email.str.contains(‘@company.com’) . ",
    "url": "/nodetool_list.html#string-operations",
    
    "relUrl": "/nodetool_list.html#string-operations"
  },"142": {
    "doc": "nodetool.list",
    "title": "Datetime conditions",
    "content": "date &gt; ‘2024-01-01’ date.dt.year == 2024 date.dt.month &gt;= 6 date.dt.day_name() == ‘Monday’ . ",
    "url": "/nodetool_list.html#datetime-conditions",
    
    "relUrl": "/nodetool_list.html#datetime-conditions"
  },"143": {
    "doc": "nodetool.list",
    "title": "Date ranges",
    "content": "date.between(‘2024-01-01’, ‘2024-12-31’) date &gt;= ‘2024-01-01’ and date &lt; ‘2025-01-01’ . ",
    "url": "/nodetool_list.html#date-ranges",
    
    "relUrl": "/nodetool_list.html#date-ranges"
  },"144": {
    "doc": "nodetool.list",
    "title": "Complex datetime",
    "content": "date.dt.hour &lt; 12 date.dt.dayofweek &lt;= 4 # Weekdays only . ",
    "url": "/nodetool_list.html#complex-datetime",
    
    "relUrl": "/nodetool_list.html#complex-datetime"
  },"145": {
    "doc": "nodetool.list",
    "title": "Numeric operations",
    "content": "price.between(100, 200) quantity % 2 == 0 # Even numbers . ",
    "url": "/nodetool_list.html#numeric-operations",
    
    "relUrl": "/nodetool_list.html#numeric-operations"
  },"146": {
    "doc": "nodetool.list",
    "title": "Special values",
    "content": "value.isna() # Check for NULL/NaN value.notna() # Check for non-NULL/non-NaN . Note: Dates should be in ISO format (YYYY-MM-DD) or include time (YYYY-MM-DD HH:MM:SS) . Use cases: . | Filter list of dictionary objects based on criteria | Extract subset of data meeting specific conditions | Clean data by removing unwanted entries | . Tags: list, filter, query, condition . Fields: . | values (list[dict]) | condition: The filtering condition using pandas query syntax. Basic Operators: - Comparison: &gt;, &lt;, &gt;=, &lt;=, ==, != - Logical: and, or, not - Membership: in, not in Example Conditions: # Basic comparisons age &gt; 30 price &lt;= 100 status == 'active' See node documentation for more examples. (str) . | . ",
    "url": "/nodetool_list.html#special-values",
    
    "relUrl": "/nodetool_list.html#special-values"
  },"147": {
    "doc": "nodetool.list",
    "title": "FilterDictsByNumber",
    "content": "Filters a list of dictionaries based on numeric values for a specified key. Use cases: . | Filter dictionaries by numeric comparisons (greater than, less than, equal to) | Filter records with even/odd numeric values | Filter entries with positive/negative numbers | . Tags: list, filter, dictionary, numbers, numeric . Fields: . | values (list[dict]) | key (str) | filter_type (FilterDictNumberType) | | value (float | None) | . | . ",
    "url": "/nodetool_list.html#filterdictsbynumber",
    
    "relUrl": "/nodetool_list.html#filterdictsbynumber"
  },"148": {
    "doc": "nodetool.list",
    "title": "FilterDictsByRange",
    "content": "Filters a list of dictionaries based on a numeric range for a specified key. Use cases: . | Filter records based on numeric ranges (e.g., price range, age range) | Find entries with values within specified bounds | Filter data sets based on numeric criteria | . Tags: list, filter, dictionary, range, between . Fields: . | values (list[dict]) | key: The dictionary key to check for the range (str) | min_value: The minimum value (inclusive) of the range (float) | max_value: The maximum value (inclusive) of the range (float) | inclusive: If True, includes the min and max values in the results (bool) | . ",
    "url": "/nodetool_list.html#filterdictsbyrange",
    
    "relUrl": "/nodetool_list.html#filterdictsbyrange"
  },"149": {
    "doc": "nodetool.list",
    "title": "FilterDictsByValue",
    "content": "Filters a list of dictionaries based on their values using various criteria. Use cases: . | Filter dictionaries by value content | Filter dictionaries by value type | Filter dictionaries by value patterns | . Tags: list, filter, dictionary, values . Fields: . | values (list[dict]) | key: The dictionary key to check (str) | filter_type: The type of filter to apply (FilterType) | criteria: The filtering criteria (text to match, type name, or length as string) (str) | . ",
    "url": "/nodetool_list.html#filterdictsbyvalue",
    
    "relUrl": "/nodetool_list.html#filterdictsbyvalue"
  },"150": {
    "doc": "nodetool.list",
    "title": "FilterDictsRegex",
    "content": "Filters a list of dictionaries using regular expressions on specified keys. Use cases: . | Filter dictionaries with values matching complex patterns | Search for dictionaries containing emails, dates, or specific formats | Advanced text pattern matching across dictionary values | . Tags: list, filter, regex, dictionary, pattern . Fields: . | values (list[dict]) | key (str) | pattern (str) | full_match (bool) | . ",
    "url": "/nodetool_list.html#filterdictsregex",
    
    "relUrl": "/nodetool_list.html#filterdictsregex"
  },"151": {
    "doc": "nodetool.list",
    "title": "FilterNone",
    "content": "Filters out None values from a list. Use cases: . | Clean data by removing null values | Get only valid entries | Remove placeholder values | . Tags: list, filter, none, null . Fields: . | values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#filternone",
    
    "relUrl": "/nodetool_list.html#filternone"
  },"152": {
    "doc": "nodetool.list",
    "title": "FilterNumberRange",
    "content": "Filters a list of numbers to find values within a specified range. Use cases: . | Find numbers within a specific range | Filter data points within bounds | Implement range-based filtering | . Tags: list, filter, numbers, range, between . Fields: . | values (list[float]) | min_value (float) | max_value (float) | inclusive (bool) | . ",
    "url": "/nodetool_list.html#filternumberrange",
    
    "relUrl": "/nodetool_list.html#filternumberrange"
  },"153": {
    "doc": "nodetool.list",
    "title": "FilterNumbers",
    "content": "Filters a list of numbers based on various numerical conditions. Use cases: . | Filter numbers by comparison (greater than, less than, equal to) | Filter even/odd numbers | Filter positive/negative numbers | . Tags: list, filter, numbers, numeric . Fields: . | values (list[float]) | filter_type: The type of filter to apply (FilterNumberType) | | value: The comparison value (for greater_than, less_than, equal_to) (float | None) | . | . ",
    "url": "/nodetool_list.html#filternumbers",
    
    "relUrl": "/nodetool_list.html#filternumbers"
  },"154": {
    "doc": "nodetool.list",
    "title": "FilterRegex",
    "content": "Filters a list of strings using regular expressions. Use cases: . | Filter strings using complex patterns | Extract strings matching specific formats (emails, dates, etc.) | Advanced text pattern matching | . Tags: list, filter, regex, pattern, text . Fields: . | values (list[str]) | pattern: The regular expression pattern to match against. (str) | full_match: Whether to match the entire string or find pattern anywhere in string (bool) | . ",
    "url": "/nodetool_list.html#filterregex",
    
    "relUrl": "/nodetool_list.html#filterregex"
  },"155": {
    "doc": "nodetool.list",
    "title": "FilterStrings",
    "content": "Filters a list of strings based on various criteria. Use cases: . | Filter strings by length | Filter strings containing specific text | Filter strings by prefix/suffix | Filter strings using regex patterns | . Tags: list, filter, strings, text . Fields: . | values (list[str]) | filter_type: The type of filter to apply (FilterType) | criteria: The filtering criteria (text to match or length as string) (str) | . ",
    "url": "/nodetool_list.html#filterstrings",
    
    "relUrl": "/nodetool_list.html#filterstrings"
  },"156": {
    "doc": "nodetool.list",
    "title": "Flatten",
    "content": "Flattens a nested list structure into a single flat list. Use cases: . | Convert nested lists into a single flat list | Simplify complex list structures | Process hierarchical data as a sequence | . Examples: [[1, 2], [3, 4]] -&gt; [1, 2, 3, 4] [[1, [2, 3]], [4, [5, 6]]] -&gt; [1, 2, 3, 4, 5, 6] . Tags: list, flatten, nested, structure . Fields: . | values (list[typing.Any]) | max_depth (int) | . ",
    "url": "/nodetool_list.html#flatten",
    
    "relUrl": "/nodetool_list.html#flatten"
  },"157": {
    "doc": "nodetool.list",
    "title": "GenerateSequence",
    "content": "Generates a list of integers within a specified range. Use cases: . | Create numbered lists | Generate index sequences | Produce arithmetic progressions | . Tags: list, range, sequence, numbers . Fields: . | start (int) | stop (int) | step (int) | . ",
    "url": "/nodetool_list.html#generatesequence",
    
    "relUrl": "/nodetool_list.html#generatesequence"
  },"158": {
    "doc": "nodetool.list",
    "title": "GetElement",
    "content": "Retrieves a single value from a list at a specific index. Use cases: . | Access a specific element by position | Implement array-like indexing | Extract the first or last element | . Tags: list, get, extract, value . Fields: . | values (list[typing.Any]) | index (int) | . ",
    "url": "/nodetool_list.html#getelement",
    
    "relUrl": "/nodetool_list.html#getelement"
  },"159": {
    "doc": "nodetool.list",
    "title": "Intersection",
    "content": "Finds common elements between two lists. Use cases: . | Find elements present in both lists | Identify shared items between collections | Filter for matching elements | . Tags: list, set, intersection, common . Fields: . | list1 (list[typing.Any]) | list2 (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#intersection",
    
    "relUrl": "/nodetool_list.html#intersection"
  },"160": {
    "doc": "nodetool.list",
    "title": "Length",
    "content": "Calculates the length of a list. Use cases: . | Determine the number of elements in a list | Check if a list is empty | Validate list size constraints | . Tags: list, count, size . Fields: . | values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#length",
    
    "relUrl": "/nodetool_list.html#length"
  },"161": {
    "doc": "nodetool.list",
    "title": "MapField",
    "content": "Extracts a specific field from a list of dictionaries or objects. Use cases: . | Extract specific fields from a list of objects | Transform complex data structures into simple lists | Collect values for a particular key across multiple dictionaries | . Tags: list, map, field, extract, pluck . Fields: . | values (list[dict | object]) | . | field (str) | default (Any) | . ",
    "url": "/nodetool_list.html#mapfield",
    
    "relUrl": "/nodetool_list.html#mapfield"
  },"162": {
    "doc": "nodetool.list",
    "title": "MapTemplate",
    "content": "Maps a template string over a list of dictionaries or objects using Jinja2 templating. Use cases: . | Formatting multiple records into strings | Generating text from structured data | Creating text representations of data collections | . Examples: . | template: “Name: , Age: “ values: [{“name”: “Alice”, “age”: 30}, {“name”: “Bob”, “age”: 25}] -&gt; [“Name: Alice, Age: 30”, “Name: Bob, Age: 25”] | . Available filters: . | truncate(length): Truncates text to given length | upper: Converts text to uppercase | lower: Converts text to lowercase | title: Converts text to title case | trim: Removes whitespace from start/end | replace(old, new): Replaces substring | default(value): Sets default if value is undefined | first: Gets first character/item | last: Gets last character/item | length: Gets length of string/list | sort: Sorts list | join(delimiter): Joins list with delimiter | . Tags: list, template, map, formatting . Fields: . | template: Template string with Jinja2 placeholders for formatting Examples: - “Name: , Age: “ - “” - “” (str) | | values (list[dict[str, typing.Any] | object]) | . | . ",
    "url": "/nodetool_list.html#maptemplate",
    
    "relUrl": "/nodetool_list.html#maptemplate"
  },"163": {
    "doc": "nodetool.list",
    "title": "Maximum",
    "content": "Finds the largest value in a list of numbers. Use cases: . | Find highest value | Get largest number in dataset | . Tags: list, max, maximum, aggregate, math . Fields: . | values (list[float]) | . ",
    "url": "/nodetool_list.html#maximum",
    
    "relUrl": "/nodetool_list.html#maximum"
  },"164": {
    "doc": "nodetool.list",
    "title": "Minimum",
    "content": "Finds the smallest value in a list of numbers. Use cases: . | Find lowest value | Get smallest number in dataset | . Tags: list, min, minimum, aggregate, math . Fields: . | values (list[float]) | . ",
    "url": "/nodetool_list.html#minimum",
    
    "relUrl": "/nodetool_list.html#minimum"
  },"165": {
    "doc": "nodetool.list",
    "title": "Product",
    "content": "Calculates the product of all numbers in a list. Use cases: . | Multiply all numbers together | Calculate compound values | . Tags: list, product, multiply, aggregate, math . Fields: . | values (list[float]) | . ",
    "url": "/nodetool_list.html#product",
    
    "relUrl": "/nodetool_list.html#product"
  },"166": {
    "doc": "nodetool.list",
    "title": "Randomize",
    "content": "Randomly shuffles the elements of a list. Use cases: . | Randomize the order of items in a playlist | Implement random sampling without replacement | Create randomized data sets for testing | . Tags: list, shuffle, random, order . Fields: . | values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#randomize",
    
    "relUrl": "/nodetool_list.html#randomize"
  },"167": {
    "doc": "nodetool.list",
    "title": "Reverse",
    "content": "Inverts the order of elements in a list. Use cases: . | Reverse the order of a sequence | . Tags: list, reverse, invert, flip . Fields: . | values (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#reverse",
    
    "relUrl": "/nodetool_list.html#reverse"
  },"168": {
    "doc": "nodetool.list",
    "title": "SaveList",
    "content": "Saves a list to a text file, placing each element on a new line. Use cases: . | Export list data to a file | Create a simple text-based database | Generate line-separated output | . Tags: list, save, file, serialize . Fields: . | values (list[typing.Any]) | name: Name of the output file. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_list.html#savelist",
    
    "relUrl": "/nodetool_list.html#savelist"
  },"169": {
    "doc": "nodetool.list",
    "title": "required_inputs",
    "content": "Args: . ",
    "url": "/nodetool_list.html#required_inputs",
    
    "relUrl": "/nodetool_list.html#required_inputs"
  },"170": {
    "doc": "nodetool.list",
    "title": "SelectElements",
    "content": "Selects specific values from a list using index positions. Use cases: . | Pick specific elements by their positions | Rearrange list elements | Create a new list from selected indices | . Tags: list, select, index, extract . Fields: . | values (list[typing.Any]) | indices (list[int]) | . ",
    "url": "/nodetool_list.html#selectelements",
    
    "relUrl": "/nodetool_list.html#selectelements"
  },"171": {
    "doc": "nodetool.list",
    "title": "Slice",
    "content": "Extracts a subset from a list using start, stop, and step indices. Use cases: . | Get a portion of a list | Implement pagination | Extract every nth element | . Tags: list, slice, subset, extract . Fields: . | values (list[typing.Any]) | start (int) | stop (int) | step (int) | . ",
    "url": "/nodetool_list.html#slice",
    
    "relUrl": "/nodetool_list.html#slice"
  },"172": {
    "doc": "nodetool.list",
    "title": "Sort",
    "content": "Sorts the elements of a list in ascending or descending order. Use cases: . | Organize data in a specific order | Prepare data for binary search or other algorithms | Rank items based on their values | . Tags: list, sort, order, arrange . Fields: . | values (list[typing.Any]) | order (SortOrder) | . ",
    "url": "/nodetool_list.html#sort",
    
    "relUrl": "/nodetool_list.html#sort"
  },"173": {
    "doc": "nodetool.list",
    "title": "Sum",
    "content": "Calculates the sum of a list of numbers. Use cases: . | Calculate total of numeric values | Add up all elements in a list | . Tags: list, sum, aggregate, math . Fields: . | values (list[float]) | . ",
    "url": "/nodetool_list.html#sum",
    
    "relUrl": "/nodetool_list.html#sum"
  },"174": {
    "doc": "nodetool.list",
    "title": "Transform",
    "content": "Applies a transformation to each element in a list. Use cases: . | Convert types (str to int, etc.) | Apply formatting | Mathematical operations | . Tags: list, transform, map, convert . Fields: . | values (list[typing.Any]) | transform_type (TransformType) | . ",
    "url": "/nodetool_list.html#transform",
    
    "relUrl": "/nodetool_list.html#transform"
  },"175": {
    "doc": "nodetool.list",
    "title": "Union",
    "content": "Combines unique elements from two lists. Use cases: . | Merge lists while removing duplicates | Combine collections uniquely | Create comprehensive set of items | . Tags: list, set, union, combine . Fields: . | list1 (list[typing.Any]) | list2 (list[typing.Any]) | . ",
    "url": "/nodetool_list.html#union",
    
    "relUrl": "/nodetool_list.html#union"
  },"176": {
    "doc": "nodetool.list",
    "title": "nodetool.list",
    "content": " ",
    "url": "/nodetool_list.html",
    
    "relUrl": "/nodetool_list.html"
  },"177": {
    "doc": "nodetool.math",
    "title": "nodetool.nodes.nodetool.math",
    "content": " ",
    "url": "/nodetool_math.html#nodetoolnodesnodetoolmath",
    
    "relUrl": "/nodetool_math.html#nodetoolnodesnodetoolmath"
  },"178": {
    "doc": "nodetool.math",
    "title": "Add",
    "content": "Performs addition on two inputs. Tags: math, plus, add, addition, sum, + . Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#add",
    
    "relUrl": "/nodetool_math.html#add"
  },"179": {
    "doc": "nodetool.math",
    "title": "BinaryOperation",
    "content": "Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#binaryoperation",
    
    "relUrl": "/nodetool_math.html#binaryoperation"
  },"180": {
    "doc": "nodetool.math",
    "title": "Cosine",
    "content": "Computes the cosine of input angles in radians. Use cases: . | Calculating horizontal components in physics | Creating circular motions | Phase calculations in signal processing | . Tags: math, trigonometry, cosine, cos . Fields: . | angle_rad (float | int) | . | . ",
    "url": "/nodetool_math.html#cosine",
    
    "relUrl": "/nodetool_math.html#cosine"
  },"181": {
    "doc": "nodetool.math",
    "title": "Divide",
    "content": "Divides the first input by the second. Tags: math, division, arithmetic, quotient, / . Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#divide",
    
    "relUrl": "/nodetool_math.html#divide"
  },"182": {
    "doc": "nodetool.math",
    "title": "Modulus",
    "content": "Calculates the element-wise remainder of division. Use cases: . | Implementing cyclic behaviors | Checking for even/odd numbers | Limiting values to a specific range | . Tags: math, modulo, remainder, mod, % . Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#modulus",
    
    "relUrl": "/nodetool_math.html#modulus"
  },"183": {
    "doc": "nodetool.math",
    "title": "Multiply",
    "content": "Multiplies two inputs. Tags: math, product, times, * . Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#multiply",
    
    "relUrl": "/nodetool_math.html#multiply"
  },"184": {
    "doc": "nodetool.math",
    "title": "Power",
    "content": "Raises the base to the power of the exponent element-wise. Use cases: . | Calculating compound interest | Implementing polynomial functions | Applying non-linear transformations to data | . Tags: math, exponentiation, power, pow, ** . Fields: . | base (float | int) | . | | exponent (float | int) | . | . ",
    "url": "/nodetool_math.html#power",
    
    "relUrl": "/nodetool_math.html#power"
  },"185": {
    "doc": "nodetool.math",
    "title": "Sine",
    "content": "Computes the sine of input angles in radians. Use cases: . | Calculating vertical components in physics | Generating smooth periodic functions | Audio signal processing | . Tags: math, trigonometry, sine, sin . Fields: . | angle_rad (float | int) | . | . ",
    "url": "/nodetool_math.html#sine",
    
    "relUrl": "/nodetool_math.html#sine"
  },"186": {
    "doc": "nodetool.math",
    "title": "Sqrt",
    "content": "Calculates the square root of the input element-wise. Use cases: . | Normalizing data | Calculating distances in Euclidean space | Finding intermediate values in binary search | . Tags: math, square root, sqrt, √ . Fields: . | x (int | float) | . | . ",
    "url": "/nodetool_math.html#sqrt",
    
    "relUrl": "/nodetool_math.html#sqrt"
  },"187": {
    "doc": "nodetool.math",
    "title": "Subtract",
    "content": "Subtracts the second input from the first. Tags: math, minus, difference, - . Fields: . | a (int | float) | . | | b (int | float) | . | . ",
    "url": "/nodetool_math.html#subtract",
    
    "relUrl": "/nodetool_math.html#subtract"
  },"188": {
    "doc": "nodetool.math",
    "title": "nodetool.math",
    "content": " ",
    "url": "/nodetool_math.html",
    
    "relUrl": "/nodetool_math.html"
  },"189": {
    "doc": "nodetool.os",
    "title": "nodetool.nodes.nodetool.os",
    "content": " ",
    "url": "/nodetool_os.html#nodetoolnodesnodetoolos",
    
    "relUrl": "/nodetool_os.html#nodetoolnodesnodetoolos"
  },"190": {
    "doc": "nodetool.os",
    "title": "AbsolutePath",
    "content": "Return the absolute path of a file or directory. Use cases: . | Convert relative paths to absolute | Get full system path | Resolve path references | . Tags: files, path, absolute . Fields: . | path: Path to convert to absolute (str) | . ",
    "url": "/nodetool_os.html#absolutepath",
    
    "relUrl": "/nodetool_os.html#absolutepath"
  },"191": {
    "doc": "nodetool.os",
    "title": "AccessedTime",
    "content": "Get file last accessed timestamp. Tags: files, metadata, accessed, time . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#accessedtime",
    
    "relUrl": "/nodetool_os.html#accessedtime"
  },"192": {
    "doc": "nodetool.os",
    "title": "Basename",
    "content": "Get the base name component of a file path. Use cases: . | Extract filename from full path | Get file name without directory | Process file names independently | . Tags: files, path, basename . Fields: . | path: File path to get basename from (str) | remove_extension: Remove file extension from basename (bool) | . ",
    "url": "/nodetool_os.html#basename",
    
    "relUrl": "/nodetool_os.html#basename"
  },"193": {
    "doc": "nodetool.os",
    "title": "CopyFile",
    "content": "Copy a file from source to destination path. Use cases: . | Create file backups | Duplicate files for processing | Copy files to new locations | . Tags: files, copy, manage . Fields: . | source_path: Source file path (FilePath) | destination_path: Destination file path (FilePath) | . ",
    "url": "/nodetool_os.html#copyfile",
    
    "relUrl": "/nodetool_os.html#copyfile"
  },"194": {
    "doc": "nodetool.os",
    "title": "CreateDirectory",
    "content": "Create a new directory at specified path. Use cases: . | Set up directory structure for file organization | Create output directories for processed files | . Tags: files, directory, create . Fields: . | path: Directory path to create (FilePath) | exist_ok: Don’t error if directory already exists (bool) | . ",
    "url": "/nodetool_os.html#createdirectory",
    
    "relUrl": "/nodetool_os.html#createdirectory"
  },"195": {
    "doc": "nodetool.os",
    "title": "CreatedTime",
    "content": "Get file creation timestamp. Tags: files, metadata, created, time . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#createdtime",
    
    "relUrl": "/nodetool_os.html#createdtime"
  },"196": {
    "doc": "nodetool.os",
    "title": "Dirname",
    "content": "Get the directory name component of a file path. Use cases: . | Extract directory path from full path | Get parent directory | Process directory paths | . Tags: files, path, dirname . Fields: . | path: File path to get dirname from (str) | . ",
    "url": "/nodetool_os.html#dirname",
    
    "relUrl": "/nodetool_os.html#dirname"
  },"197": {
    "doc": "nodetool.os",
    "title": "FileExists",
    "content": "Check if a file or directory exists at the specified path. Use cases: . | Validate file presence before processing | Implement conditional logic based on file existence | . Tags: files, check, exists . Fields: . | path: Path to check for existence (FilePath) | . ",
    "url": "/nodetool_os.html#fileexists",
    
    "relUrl": "/nodetool_os.html#fileexists"
  },"198": {
    "doc": "nodetool.os",
    "title": "FileExtension",
    "content": "Get file extension. Tags: files, metadata, extension . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#fileextension",
    
    "relUrl": "/nodetool_os.html#fileextension"
  },"199": {
    "doc": "nodetool.os",
    "title": "FileName",
    "content": "Get file name without path. Tags: files, metadata, name . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#filename",
    
    "relUrl": "/nodetool_os.html#filename"
  },"200": {
    "doc": "nodetool.os",
    "title": "FileNameMatch",
    "content": "Match a filename against a pattern using Unix shell-style wildcards. Use cases: . | Filter files by name pattern | Validate file naming conventions | Match file extensions | . Tags: files, pattern, match, filter . Fields: . | filename: Filename to check (str) | pattern: Pattern to match against (e.g.txt, data_.csv) (str) | case_sensitive: Whether the pattern matching should be case-sensitive (bool) | . ",
    "url": "/nodetool_os.html#filenamematch",
    
    "relUrl": "/nodetool_os.html#filenamematch"
  },"201": {
    "doc": "nodetool.os",
    "title": "FilterFileNames",
    "content": "Filter a list of filenames using Unix shell-style wildcards. Use cases: . | Filter multiple files by pattern | Batch process files matching criteria | Select files by extension | . Tags: files, pattern, filter, list . Fields: . | filenames: list of filenames to filter (list[str]) | pattern: Pattern to filter by (e.g.txt, data_.csv) (str) | case_sensitive: Whether the pattern matching should be case-sensitive (bool) | . ",
    "url": "/nodetool_os.html#filterfilenames",
    
    "relUrl": "/nodetool_os.html#filterfilenames"
  },"202": {
    "doc": "nodetool.os",
    "title": "GetDirectory",
    "content": "Get directory containing the file. Tags: files, metadata, directory . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#getdirectory",
    
    "relUrl": "/nodetool_os.html#getdirectory"
  },"203": {
    "doc": "nodetool.os",
    "title": "GetEnvironmentVariable",
    "content": "Gets an environment variable value. Use cases: . | Access configuration | Get system settings | . Tags: environment, variable, system . Fields: . | name: Environment variable name (str) | | default: Default value if not found (str | None) | . | . ",
    "url": "/nodetool_os.html#getenvironmentvariable",
    
    "relUrl": "/nodetool_os.html#getenvironmentvariable"
  },"204": {
    "doc": "nodetool.os",
    "title": "GetFileSize",
    "content": "Get file size in bytes. Tags: files, metadata, size . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#getfilesize",
    
    "relUrl": "/nodetool_os.html#getfilesize"
  },"205": {
    "doc": "nodetool.os",
    "title": "GetPathInfo",
    "content": "Gets information about a path. Use cases: . | Extract path components | Parse file paths | . Tags: path, info, metadata . Fields: . | path: Path to analyze (str) | . ",
    "url": "/nodetool_os.html#getpathinfo",
    
    "relUrl": "/nodetool_os.html#getpathinfo"
  },"206": {
    "doc": "nodetool.os",
    "title": "GetSystemInfo",
    "content": "Gets system information. Use cases: . | Check system compatibility | Platform-specific logic | . Tags: system, info, platform . Fields: . ",
    "url": "/nodetool_os.html#getsysteminfo",
    
    "relUrl": "/nodetool_os.html#getsysteminfo"
  },"207": {
    "doc": "nodetool.os",
    "title": "IsDirectory",
    "content": "Check if path is a directory. Tags: files, metadata, type . Fields: . | path: Path to check (FilePath) | . ",
    "url": "/nodetool_os.html#isdirectory",
    
    "relUrl": "/nodetool_os.html#isdirectory"
  },"208": {
    "doc": "nodetool.os",
    "title": "IsFile",
    "content": "Check if path is a file. Tags: files, metadata, type . Fields: . | path: Path to check (FilePath) | . ",
    "url": "/nodetool_os.html#isfile",
    
    "relUrl": "/nodetool_os.html#isfile"
  },"209": {
    "doc": "nodetool.os",
    "title": "JoinPaths",
    "content": "Joins path components. Use cases: . | Build file paths | Create cross-platform paths | . Tags: path, join, combine . Fields: . | paths: Path components to join (list[str]) | . ",
    "url": "/nodetool_os.html#joinpaths",
    
    "relUrl": "/nodetool_os.html#joinpaths"
  },"210": {
    "doc": "nodetool.os",
    "title": "ListFiles",
    "content": "list files in a directory matching a pattern. Use cases: . | Get files for batch processing | Filter files by extension or pattern | . Tags: files, list, directory . Fields: . | directory: Directory to scan (FilePath) | pattern: File pattern to match (e.g. *.txt) (str) | recursive: Search subdirectories (bool) | . ",
    "url": "/nodetool_os.html#listfiles",
    
    "relUrl": "/nodetool_os.html#listfiles"
  },"211": {
    "doc": "nodetool.os",
    "title": "LoadAudioFile",
    "content": "Read an audio file from disk. Use cases: . | Load audio for processing | Import sound files for editing | Read audio assets for a workflow | . Tags: audio, input, load, file . Fields: . | path: Path to the audio file to read (FilePath) | . ",
    "url": "/nodetool_os.html#loadaudiofile",
    
    "relUrl": "/nodetool_os.html#loadaudiofile"
  },"212": {
    "doc": "nodetool.os",
    "title": "LoadBytesFile",
    "content": "Read raw bytes from a file on disk. Use cases: . | Load binary data for processing | Read binary files for a workflow | . Tags: files, bytes, read, input, load, file . Fields: . | path: Path to the file to read (FilePath) | . ",
    "url": "/nodetool_os.html#loadbytesfile",
    
    "relUrl": "/nodetool_os.html#loadbytesfile"
  },"213": {
    "doc": "nodetool.os",
    "title": "LoadCSVFile",
    "content": "Read a CSV file from disk. Tags: files, csv, read, input, load, file . Fields: . | path: Path to the CSV file to read (FilePath) | . ",
    "url": "/nodetool_os.html#loadcsvfile",
    
    "relUrl": "/nodetool_os.html#loadcsvfile"
  },"214": {
    "doc": "nodetool.os",
    "title": "LoadDocumentFile",
    "content": "Read a document from disk. Tags: files, document, read, input, load, file . Fields: . | path: Path to the document to read (FilePath) | . ",
    "url": "/nodetool_os.html#loaddocumentfile",
    
    "relUrl": "/nodetool_os.html#loaddocumentfile"
  },"215": {
    "doc": "nodetool.os",
    "title": "LoadImageFile",
    "content": "Read an image file from disk. Use cases: . | Load images for processing | Import photos for editing | Read image assets for a workflow | . Tags: image, input, load, file . Fields: . | path: Path to the image file to read (FilePath) | . ",
    "url": "/nodetool_os.html#loadimagefile",
    
    "relUrl": "/nodetool_os.html#loadimagefile"
  },"216": {
    "doc": "nodetool.os",
    "title": "LoadVideoFile",
    "content": "Read a video file from disk. Use cases: . | Load videos for processing | Import video files for editing | Read video assets for a workflow | . Tags: video, input, load, file . Fields: . | path: Path to the video file to read (str) | . ",
    "url": "/nodetool_os.html#loadvideofile",
    
    "relUrl": "/nodetool_os.html#loadvideofile"
  },"217": {
    "doc": "nodetool.os",
    "title": "ModifiedTime",
    "content": "Get file last modified timestamp. Tags: files, metadata, modified, time . Fields: . | path: Path to file (FilePath) | . ",
    "url": "/nodetool_os.html#modifiedtime",
    
    "relUrl": "/nodetool_os.html#modifiedtime"
  },"218": {
    "doc": "nodetool.os",
    "title": "MoveFile",
    "content": "Move a file from source to destination path. Use cases: . | Organize files into directories | Process and archive files | Relocate completed files | . Tags: files, move, manage . Fields: . | source_path: Source file path (FilePath) | destination_path: Destination file path (FilePath) | . ",
    "url": "/nodetool_os.html#movefile",
    
    "relUrl": "/nodetool_os.html#movefile"
  },"219": {
    "doc": "nodetool.os",
    "title": "NormalizePath",
    "content": "Normalizes a path. Use cases: . | Standardize paths | Remove redundant separators | . Tags: path, normalize, clean . Fields: . | path: Path to normalize (str) | . ",
    "url": "/nodetool_os.html#normalizepath",
    
    "relUrl": "/nodetool_os.html#normalizepath"
  },"220": {
    "doc": "nodetool.os",
    "title": "PathToString",
    "content": "Convert a FilePath object to a string. Use cases: . | Get raw string path from FilePath object | Convert FilePath for string operations | Extract path string for external use | . Tags: files, path, string, convert . Fields: . | file_path: FilePath object to convert to string (FilePath) | . ",
    "url": "/nodetool_os.html#pathtostring",
    
    "relUrl": "/nodetool_os.html#pathtostring"
  },"221": {
    "doc": "nodetool.os",
    "title": "RelativePath",
    "content": "Return a relative path to a target from a start directory. Use cases: . | Create relative path references | Generate portable paths | Compare file locations | . Tags: files, path, relative . Fields: . | target_path: Target path to convert to relative (str) | start_path: Start path for relative conversion (str) | . ",
    "url": "/nodetool_os.html#relativepath",
    
    "relUrl": "/nodetool_os.html#relativepath"
  },"222": {
    "doc": "nodetool.os",
    "title": "SaveAudioFile",
    "content": "Write an audio file to disk. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: audio, output, save, file . Fields: . | audio: The audio to save (AudioRef) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the file to save. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_os.html#saveaudiofile",
    
    "relUrl": "/nodetool_os.html#saveaudiofile"
  },"223": {
    "doc": "nodetool.os",
    "title": "SaveBytesFile",
    "content": "Write raw bytes to a file on disk. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: files, bytes, save, output . Fields: . | data: The bytes to write to file (bytes) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the file to save. Supports strftime format codes. (str) | . ",
    "url": "/nodetool_os.html#savebytesfile",
    
    "relUrl": "/nodetool_os.html#savebytesfile"
  },"224": {
    "doc": "nodetool.os",
    "title": "SaveCSVDataframeFile",
    "content": "Write a pandas DataFrame to a CSV file. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: files, csv, write, output, save, file . Fields: . | dataframe: DataFrame to write to CSV (DataframeRef) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the CSV file to save. Supports strftime format codes. (str) | . ",
    "url": "/nodetool_os.html#savecsvdataframefile",
    
    "relUrl": "/nodetool_os.html#savecsvdataframefile"
  },"225": {
    "doc": "nodetool.os",
    "title": "SaveCSVFile",
    "content": "Write a list of dictionaries to a CSV file. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: files, csv, write, output, save, file . Fields: . | data: list of dictionaries to write to CSV (list[dict]) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the CSV file to save. Supports strftime format codes. (str) | . ",
    "url": "/nodetool_os.html#savecsvfile",
    
    "relUrl": "/nodetool_os.html#savecsvfile"
  },"226": {
    "doc": "nodetool.os",
    "title": "SaveDocumentFile",
    "content": "Write a document to disk. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: files, document, write, output, save, file . Fields: . | document: The document to save (DocumentRef) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the file to save. Supports strftime format codes. (str) | . ",
    "url": "/nodetool_os.html#savedocumentfile",
    
    "relUrl": "/nodetool_os.html#savedocumentfile"
  },"227": {
    "doc": "nodetool.os",
    "title": "SaveImageFile",
    "content": "Write an image to disk. Use cases: . | Save processed images | Export edited photos | Archive image results | . Tags: image, output, save, file . Fields: . | image: The image to save (ImageRef) | folder: Folder where the file will be saved (FolderPath) | filename: The name of the image file. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_os.html#saveimagefile",
    
    "relUrl": "/nodetool_os.html#saveimagefile"
  },"228": {
    "doc": "nodetool.os",
    "title": "SaveVideoFile",
    "content": "Write a video file to disk. The filename can include time and date variables: %Y - Year, %m - Month, %d - Day %H - Hour, %M - Minute, %S - Second . Tags: video, output, save, file . Fields: . | video: The video to save (VideoRef) | folder: Folder where the file will be saved (FolderPath) | filename: Name of the file to save. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_os.html#savevideofile",
    
    "relUrl": "/nodetool_os.html#savevideofile"
  },"229": {
    "doc": "nodetool.os",
    "title": "SetEnvironmentVariable",
    "content": "Sets an environment variable. Use cases: . | Configure runtime settings | Set up process environment | . Tags: environment, variable, system . Fields: . | name: Environment variable name (str) | value: Environment variable value (str) | . ",
    "url": "/nodetool_os.html#setenvironmentvariable",
    
    "relUrl": "/nodetool_os.html#setenvironmentvariable"
  },"230": {
    "doc": "nodetool.os",
    "title": "ShowNotification",
    "content": "Shows a system notification. Use cases: . | Alert user of completed tasks | Show process status | Display important messages | . Tags: notification, system, alert . Fields: . | title: Title of the notification (str) | message: Content of the notification (str) | timeout: How long the notification should stay visible (in seconds) (int) | . ",
    "url": "/nodetool_os.html#shownotification",
    
    "relUrl": "/nodetool_os.html#shownotification"
  },"231": {
    "doc": "nodetool.os",
    "title": "SplitExtension",
    "content": "Split a path into root and extension components. Use cases: . | Extract file extension | Process filename without extension | Handle file types | . Tags: files, path, extension, split . Fields: . | path: Path to split (str) | . ",
    "url": "/nodetool_os.html#splitextension",
    
    "relUrl": "/nodetool_os.html#splitextension"
  },"232": {
    "doc": "nodetool.os",
    "title": "SplitPath",
    "content": "Split a path into directory and file components. Use cases: . | Separate directory from filename | Process path components separately | Extract path parts | . Tags: files, path, split . Fields: . | path: Path to split (str) | . ",
    "url": "/nodetool_os.html#splitpath",
    
    "relUrl": "/nodetool_os.html#splitpath"
  },"233": {
    "doc": "nodetool.os",
    "title": "nodetool.os",
    "content": " ",
    "url": "/nodetool_os.html",
    
    "relUrl": "/nodetool_os.html"
  },"234": {
    "doc": "nodetool.output",
    "title": "nodetool.nodes.nodetool.output",
    "content": " ",
    "url": "/nodetool_output.html#nodetoolnodesnodetooloutput",
    
    "relUrl": "/nodetool_output.html#nodetoolnodesnodetooloutput"
  },"235": {
    "doc": "nodetool.output",
    "title": "ArrayOutput",
    "content": "Output node for generic array data. Use cases: . | Outputting results from machine learning models | Representing complex numerical data structures | . Tags: array, numerical . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (NPArray) | . ",
    "url": "/nodetool_output.html#arrayoutput",
    
    "relUrl": "/nodetool_output.html#arrayoutput"
  },"236": {
    "doc": "nodetool.output",
    "title": "AudioOutput",
    "content": "Output node for audio content references. Use cases: . | Displaying processed or generated audio | Passing audio data between workflow nodes | Returning results of audio analysis | . Tags: audio, sound, media . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (AudioRef) | . ",
    "url": "/nodetool_output.html#audiooutput",
    
    "relUrl": "/nodetool_output.html#audiooutput"
  },"237": {
    "doc": "nodetool.output",
    "title": "BooleanOutput",
    "content": "Output node for a single boolean value. Use cases: . | Returning binary results (yes/no, true/false) | Controlling conditional logic in workflows | Indicating success/failure of operations | . Tags: boolean, true, false, flag, condition, flow-control, branch, else, true, false, switch, toggle . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (bool) | . ",
    "url": "/nodetool_output.html#booleanoutput",
    
    "relUrl": "/nodetool_output.html#booleanoutput"
  },"238": {
    "doc": "nodetool.output",
    "title": "DataframeOutput",
    "content": "Output node for structured data references. Use cases: . | Outputting tabular data results | Passing structured data between analysis steps | Displaying data in table format | . Tags: dataframe, table, structured . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (DataframeRef) | . ",
    "url": "/nodetool_output.html#dataframeoutput",
    
    "relUrl": "/nodetool_output.html#dataframeoutput"
  },"239": {
    "doc": "nodetool.output",
    "title": "DictionaryOutput",
    "content": "Output node for key-value pair data. Use cases: . | Returning multiple named values | Passing complex data structures between nodes | Organizing heterogeneous output data | . Tags: dictionary, key-value, mapping . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (dict[str, typing.Any]) | . ",
    "url": "/nodetool_output.html#dictionaryoutput",
    
    "relUrl": "/nodetool_output.html#dictionaryoutput"
  },"240": {
    "doc": "nodetool.output",
    "title": "DocumentOutput",
    "content": "Output node for document content references. Use cases: . | Displaying processed or generated documents | Passing document data between workflow nodes | Returning results of document analysis | . Tags: document, pdf, file . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (DocumentRef) | . ",
    "url": "/nodetool_output.html#documentoutput",
    
    "relUrl": "/nodetool_output.html#documentoutput"
  },"241": {
    "doc": "nodetool.output",
    "title": "FloatOutput",
    "content": "Output node for a single float value. Use cases: . | Returning decimal results (e.g. percentages, ratios) | Passing floating-point parameters between nodes | Displaying numeric metrics with decimal precision | . Tags: float, decimal, number . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (float) | . ",
    "url": "/nodetool_output.html#floatoutput",
    
    "relUrl": "/nodetool_output.html#floatoutput"
  },"242": {
    "doc": "nodetool.output",
    "title": "GroupOutput",
    "content": "Generic output node for grouped data from any node. Use cases: . | Aggregating multiple outputs from a single node | Passing varied data types as a single unit | Organizing related outputs in workflows | . Tags: group, composite, multi-output . Fields: . | input (Any) | . ",
    "url": "/nodetool_output.html#groupoutput",
    
    "relUrl": "/nodetool_output.html#groupoutput"
  },"243": {
    "doc": "nodetool.output",
    "title": "ImageListOutput",
    "content": "Output node for a list of image references. Use cases: . | Displaying multiple images in a grid | Returning image search results | . Tags: images, list, gallery . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value: The images to display. (list[nodetool.metadata.types.ImageRef]) | . ",
    "url": "/nodetool_output.html#imagelistoutput",
    
    "relUrl": "/nodetool_output.html#imagelistoutput"
  },"244": {
    "doc": "nodetool.output",
    "title": "ImageOutput",
    "content": "Output node for a single image reference. Use cases: . | Displaying a single processed or generated image | Passing image data between workflow nodes | Returning image analysis results | . Tags: image, picture, visual . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (ImageRef) | . ",
    "url": "/nodetool_output.html#imageoutput",
    
    "relUrl": "/nodetool_output.html#imageoutput"
  },"245": {
    "doc": "nodetool.output",
    "title": "IntegerOutput",
    "content": "Output node for a single integer value. Use cases: . | Returning numeric results (e.g. counts, indices) | Passing integer parameters between nodes | Displaying numeric metrics | . Tags: integer, number, count . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (int) | . ",
    "url": "/nodetool_output.html#integeroutput",
    
    "relUrl": "/nodetool_output.html#integeroutput"
  },"246": {
    "doc": "nodetool.output",
    "title": "ListOutput",
    "content": "Output node for a list of arbitrary values. Use cases: . | Returning multiple results from a workflow | Aggregating outputs from multiple nodes | . Tags: list, output, any . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (list[typing.Any]) | . ",
    "url": "/nodetool_output.html#listoutput",
    
    "relUrl": "/nodetool_output.html#listoutput"
  },"247": {
    "doc": "nodetool.output",
    "title": "ModelOutput",
    "content": "Output node for machine learning model references. Use cases: . | Passing trained models between workflow steps | Outputting newly created or fine-tuned models | Referencing models for later use in the workflow | . Tags: model, ml, ai . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (ModelRef) | . ",
    "url": "/nodetool_output.html#modeloutput",
    
    "relUrl": "/nodetool_output.html#modeloutput"
  },"248": {
    "doc": "nodetool.output",
    "title": "StringOutput",
    "content": "Output node for a single string value. Use cases: . | Returning text results or messages | Passing string parameters between nodes | Displaying short text outputs | . Tags: string, text, output . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (str) | . ",
    "url": "/nodetool_output.html#stringoutput",
    
    "relUrl": "/nodetool_output.html#stringoutput"
  },"249": {
    "doc": "nodetool.output",
    "title": "TextOutput",
    "content": "Output node for structured text content. Use cases: . | Returning longer text content or documents | Passing formatted text between processing steps | Displaying rich text output | . Tags: text, content, document . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (TextRef) | . ",
    "url": "/nodetool_output.html#textoutput",
    
    "relUrl": "/nodetool_output.html#textoutput"
  },"250": {
    "doc": "nodetool.output",
    "title": "VideoOutput",
    "content": "Output node for video content references. Use cases: . | Displaying processed or generated video content | Passing video data between workflow steps | Returning results of video analysis | . Tags: video, media, clip . Fields: . | name: The parameter name for the workflow. (str) | description: The description for this output node. (str) | value (VideoRef) | . ",
    "url": "/nodetool_output.html#videooutput",
    
    "relUrl": "/nodetool_output.html#videooutput"
  },"251": {
    "doc": "nodetool.output",
    "title": "nodetool.output",
    "content": " ",
    "url": "/nodetool_output.html",
    
    "relUrl": "/nodetool_output.html"
  },"252": {
    "doc": "nodetool.text",
    "title": "nodetool.nodes.nodetool.text",
    "content": " ",
    "url": "/nodetool_text.html#nodetoolnodesnodetooltext",
    
    "relUrl": "/nodetool_text.html#nodetoolnodesnodetooltext"
  },"253": {
    "doc": "nodetool.text",
    "title": "Chunk",
    "content": "Splits text into chunks of specified word length. Use cases: . | Preparing text for processing by models with input length limits | Creating manageable text segments for parallel processing | Generating summaries of text sections | . Tags: text, chunk, split . Fields: . | text (str) | length (int) | overlap (int) | | separator (str | None) | . | . ",
    "url": "/nodetool_text.html#chunk",
    
    "relUrl": "/nodetool_text.html#chunk"
  },"254": {
    "doc": "nodetool.text",
    "title": "Concat",
    "content": "Concatenates two text inputs into a single output. Use cases: . | Joining outputs from multiple text processing nodes | Combining parts of sentences or paragraphs | Merging text data from different sources | . Tags: text, concatenation, combine, + . Fields: . | a (str) | b (str) | . ",
    "url": "/nodetool_text.html#concat",
    
    "relUrl": "/nodetool_text.html#concat"
  },"255": {
    "doc": "nodetool.text",
    "title": "Contains",
    "content": "Checks if text contains a specified substring. Use cases: . | Searching for keywords in text | Filtering content based on presence of terms | Validating text content | . Tags: text, check, contains, compare, validate, substring, string . Fields: . | text (str) | substring (str) | case_sensitive (bool) | . ",
    "url": "/nodetool_text.html#contains",
    
    "relUrl": "/nodetool_text.html#contains"
  },"256": {
    "doc": "nodetool.text",
    "title": "CountTokens",
    "content": "Counts the number of tokens in text using tiktoken. Use cases: . | Checking text length for LLM input limits | Estimating API costs | Managing token budgets in text processing | . Tags: text, tokens, count, encoding . Fields: . | text (str) | encoding: The tiktoken encoding to use for token counting (TiktokenEncoding) | . ",
    "url": "/nodetool_text.html#counttokens",
    
    "relUrl": "/nodetool_text.html#counttokens"
  },"257": {
    "doc": "nodetool.text",
    "title": "EndsWith",
    "content": "Checks if text ends with a specified suffix. Use cases: . | Validating file extensions | Checking string endings | Filtering text based on ending content | . Tags: text, check, suffix, compare, validate, substring, string . Fields: . | text (str) | suffix (str) | . ",
    "url": "/nodetool_text.html#endswith",
    
    "relUrl": "/nodetool_text.html#endswith"
  },"258": {
    "doc": "nodetool.text",
    "title": "Extract",
    "content": "Extracts a substring from input text. Use cases: . | Extracting specific portions of text for analysis | Trimming unwanted parts from text data | Focusing on relevant sections of longer documents | . Tags: text, extract, substring . Fields: . | text (str) | start (int) | end (int) | . ",
    "url": "/nodetool_text.html#extract",
    
    "relUrl": "/nodetool_text.html#extract"
  },"259": {
    "doc": "nodetool.text",
    "title": "ExtractJSON",
    "content": "Extracts data from JSON using JSONPath expressions. Use cases: . | Retrieving specific fields from complex JSON structures | Filtering and transforming JSON data for analysis | Extracting nested data from API responses or configurations | . Tags: json, extract, jsonpath . Fields: . | text (str) | json_path (str) | find_all (bool) | . ",
    "url": "/nodetool_text.html#extractjson",
    
    "relUrl": "/nodetool_text.html#extractjson"
  },"260": {
    "doc": "nodetool.text",
    "title": "ExtractRegex",
    "content": "Extracts substrings matching regex groups from text. Use cases: . | Extracting structured data (e.g., dates, emails) from unstructured text | Parsing specific patterns in log files or documents | Isolating relevant information from complex text formats | . Tags: text, regex, extract . Fields: . | text (str) | regex (str) | dotall (bool) | ignorecase (bool) | multiline (bool) | . ",
    "url": "/nodetool_text.html#extractregex",
    
    "relUrl": "/nodetool_text.html#extractregex"
  },"261": {
    "doc": "nodetool.text",
    "title": "FindAllRegex",
    "content": "Finds all regex matches in text as separate substrings. Use cases: . | Identifying all occurrences of a pattern in text | Extracting multiple instances of structured data | Analyzing frequency and distribution of specific text patterns | . Tags: text, regex, find . Fields: . | text (str) | regex (str) | dotall (bool) | ignorecase (bool) | multiline (bool) | . ",
    "url": "/nodetool_text.html#findallregex",
    
    "relUrl": "/nodetool_text.html#findallregex"
  },"262": {
    "doc": "nodetool.text",
    "title": "FormatText",
    "content": "Replaces placeholders in a string with dynamic inputs using Jinja2 templating. Use cases: . | Generating personalized messages with dynamic content | Creating parameterized queries or commands | Formatting and filtering text output based on variable inputs | . Examples: . | text: “Hello, !” | text: “Title: “ | text: “Name: “ | . Available filters: . | truncate(length): Truncates text to given length | upper: Converts text to uppercase | lower: Converts text to lowercase | title: Converts text to title case | trim: Removes whitespace from start/end | replace(old, new): Replaces substring | default(value): Sets default if value is undefined | first: Gets first character/item | last: Gets last character/item | length: Gets length of string/list | sort: Sorts list | join(delimiter): Joins list with delimiter | . Tags: text, template, formatting . Fields: . | template: Examples: . | text: “Hello, !” | text: “Title: “ | text: “Name: “ | . Available filters: . | truncate(length): Truncates text to given length | upper: Converts text to uppercase | lower: Converts text to lowercase | title: Converts text to title case | trim: Removes whitespace from start/end | replace(old, new): Replaces substring | default(value): Sets default if value is undefined | first: Gets first character/item | last: Gets last character/item | length: Gets length of string/list | sort: Sorts list | join(delimiter): Joins list with delimiter (str) | . | . ",
    "url": "/nodetool_text.html#formattext",
    
    "relUrl": "/nodetool_text.html#formattext"
  },"263": {
    "doc": "nodetool.text",
    "title": "HasLength",
    "content": "Checks if text length meets specified conditions. Use cases: . | Validating input length requirements | Filtering text by length | Checking content size constraints | . Tags: text, check, length, compare, validate, whitespace, string . Fields: . | text (str) | | min_length (int | None) | . | | max_length (int | None) | . | | exact_length (int | None) | . | . ",
    "url": "/nodetool_text.html#haslength",
    
    "relUrl": "/nodetool_text.html#haslength"
  },"264": {
    "doc": "nodetool.text",
    "title": "IsEmpty",
    "content": "Checks if text is empty or contains only whitespace. Use cases: . | Validating required text fields | Filtering out empty content | Checking for meaningful input | . Tags: text, check, empty, compare, validate, whitespace, string . Fields: . | text (str) | trim_whitespace (bool) | . ",
    "url": "/nodetool_text.html#isempty",
    
    "relUrl": "/nodetool_text.html#isempty"
  },"265": {
    "doc": "nodetool.text",
    "title": "Join",
    "content": "Joins a list of strings into a single string using a specified separator. Use cases: . | Combining multiple text elements with a consistent delimiter | Creating comma-separated lists from individual items | Assembling formatted text from array elements | . Tags: text, join, combine, +, add, concatenate . Fields: . | strings (list[str]) | separator (str) | . ",
    "url": "/nodetool_text.html#join",
    
    "relUrl": "/nodetool_text.html#join"
  },"266": {
    "doc": "nodetool.text",
    "title": "ParseJSON",
    "content": "Parses a JSON string into a Python object. Use cases: . | Converting JSON API responses for further processing | Preparing structured data for analysis or storage | Extracting configuration or settings from JSON files | . Tags: json, parse, convert . Fields: . | text (str) | . ",
    "url": "/nodetool_text.html#parsejson",
    
    "relUrl": "/nodetool_text.html#parsejson"
  },"267": {
    "doc": "nodetool.text",
    "title": "RegexMatch",
    "content": "Find all matches of a regex pattern in text. Use cases: . | Extract specific patterns from text | Validate text against patterns | Find all occurrences of a pattern | . Tags: regex, search, pattern, match . Fields: . | text: Text to search in (str) | pattern: Regular expression pattern (str) | | group: Capture group to extract (0 for full match) (int | None) | . | . ",
    "url": "/nodetool_text.html#regexmatch",
    
    "relUrl": "/nodetool_text.html#regexmatch"
  },"268": {
    "doc": "nodetool.text",
    "title": "RegexReplace",
    "content": "Replace text matching a regex pattern. Use cases: . | Clean or standardize text | Remove unwanted patterns | Transform text formats | . Tags: regex, replace, substitute . Fields: . | text: Text to perform replacements on (str) | pattern: Regular expression pattern (str) | replacement: Replacement text (str) | count: Maximum replacements (0 for unlimited) (int) | . ",
    "url": "/nodetool_text.html#regexreplace",
    
    "relUrl": "/nodetool_text.html#regexreplace"
  },"269": {
    "doc": "nodetool.text",
    "title": "RegexSplit",
    "content": "Split text using a regex pattern as delimiter. Use cases: . | Parse structured text | Extract fields from formatted strings | Tokenize text | . Tags: regex, split, tokenize . Fields: . | text: Text to split (str) | pattern: Regular expression pattern to split on (str) | maxsplit: Maximum number of splits (0 for unlimited) (int) | . ",
    "url": "/nodetool_text.html#regexsplit",
    
    "relUrl": "/nodetool_text.html#regexsplit"
  },"270": {
    "doc": "nodetool.text",
    "title": "RegexValidate",
    "content": "Check if text matches a regex pattern. Use cases: . | Validate input formats (email, phone, etc) | Check text structure | Filter text based on patterns | . Tags: regex, validate, check . Fields: . | text: Text to validate (str) | pattern: Regular expression pattern (str) | . ",
    "url": "/nodetool_text.html#regexvalidate",
    
    "relUrl": "/nodetool_text.html#regexvalidate"
  },"271": {
    "doc": "nodetool.text",
    "title": "Replace",
    "content": "Replaces a substring in a text with another substring. Use cases: . | Correcting or updating specific text patterns | Sanitizing or normalizing text data | Implementing simple text transformations | . Tags: text, replace, substitute . Fields: . | text (str) | old (str) | new (str) | . ",
    "url": "/nodetool_text.html#replace",
    
    "relUrl": "/nodetool_text.html#replace"
  },"272": {
    "doc": "nodetool.text",
    "title": "SaveText",
    "content": "Saves input text to a file in the assets folder. Use cases: . | Persisting processed text results | Creating text files for downstream nodes or external use | Archiving text data within the workflow | . Tags: text, save, file . Fields: . | text (str) | folder: Name of the output folder. (FolderRef) | name: Name of the output file. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_text.html#savetext",
    
    "relUrl": "/nodetool_text.html#savetext"
  },"273": {
    "doc": "nodetool.text",
    "title": "required_inputs",
    "content": "Args: . ",
    "url": "/nodetool_text.html#required_inputs",
    
    "relUrl": "/nodetool_text.html#required_inputs"
  },"274": {
    "doc": "nodetool.text",
    "title": "Slice",
    "content": "Slices text using Python’s slice notation (start:stop:step). Use cases: . | Extracting specific portions of text with flexible indexing | Reversing text using negative step | Taking every nth character with step parameter | . Examples: . | start=0, stop=5: first 5 characters | start=-5: last 5 characters | step=2: every second character | step=-1: reverse the text | . Tags: text, slice, substring . Fields: . | text (str) | | start (int | None) | . | | stop (int | None) | . | | step (int | None) | . | . ",
    "url": "/nodetool_text.html#slice",
    
    "relUrl": "/nodetool_text.html#slice"
  },"275": {
    "doc": "nodetool.text",
    "title": "Split",
    "content": "Separates text into a list of strings based on a specified delimiter. Use cases: . | Parsing CSV or similar delimited data | Breaking down sentences into words or phrases | Extracting specific elements from structured text | . Tags: text, split, tokenize . Fields: . | text (str) | delimiter (str) | . ",
    "url": "/nodetool_text.html#split",
    
    "relUrl": "/nodetool_text.html#split"
  },"276": {
    "doc": "nodetool.text",
    "title": "StartsWith",
    "content": "Checks if text starts with a specified prefix. Use cases: . | Validating string prefixes | Filtering text based on starting content | Checking file name patterns | . Tags: text, check, prefix, compare, validate, substring, string . Fields: . | text (str) | prefix (str) | . ",
    "url": "/nodetool_text.html#startswith",
    
    "relUrl": "/nodetool_text.html#startswith"
  },"277": {
    "doc": "nodetool.text",
    "title": "Template",
    "content": "Uses Jinja2 templating to format strings with variables and filters. Use cases: . | Generating personalized messages with dynamic content | Creating parameterized queries or commands | Formatting and filtering text output based on variable inputs | . Examples: . | text: “Hello, !” | text: “Title: “ | text: “Name: “ | . Available filters: . | truncate(length): Truncates text to given length | upper: Converts text to uppercase | lower: Converts text to lowercase | title: Converts text to title case | trim: Removes whitespace from start/end | replace(old, new): Replaces substring | default(value): Sets default if value is undefined | first: Gets first character/item | last: Gets last character/item | length: Gets length of string/list | sort: Sorts list | join(delimiter): Joins list with delimiter | . Tags: text, template, formatting, format, combine, concatenate, +, add, variable, replace, filter . Fields: . | string: Examples: . | text: “Hello, !” | text: “Title: “ | text: “Name: “ | . Available filters: . | truncate(length): Truncates text to given length | upper: Converts text to uppercase | lower: Converts text to lowercase | title: Converts text to title case | trim: Removes whitespace from start/end | replace(old, new): Replaces substring | default(value): Sets default if value is undefined | first: Gets first character/item | last: Gets last character/item | length: Gets length of string/list | sort: Sorts list | join(delimiter): Joins list with delimiter (str) | . | values: The values to replace in the string. - If a string, it will be used as the format string. - If a list, it will be used as the format arguments. - If a dictionary, it will be used as the template variables. - If an object, it will be converted to a dictionary using the object’s dict method. (str | list | dict[str, typing.Any] | object) | . ",
    "url": "/nodetool_text.html#template",
    
    "relUrl": "/nodetool_text.html#template"
  },"278": {
    "doc": "nodetool.text",
    "title": "nodetool.text",
    "content": " ",
    "url": "/nodetool_text.html",
    
    "relUrl": "/nodetool_text.html"
  },"279": {
    "doc": "nodetool.video",
    "title": "nodetool.nodes.nodetool.video",
    "content": " ",
    "url": "/nodetool_video.html#nodetoolnodesnodetoolvideo",
    
    "relUrl": "/nodetool_video.html#nodetoolnodesnodetoolvideo"
  },"280": {
    "doc": "nodetool.video",
    "title": "AddAudio",
    "content": "Add an audio track to a video, replacing or mixing with existing audio. Use cases: . | Add background music or narration to a silent video | Replace original audio with a new soundtrack | Mix new audio with existing video sound | . Tags: video, audio, soundtrack, merge . Fields: . | video: The input video to add audio to. (VideoRef) | audio: The audio file to add to the video. (AudioRef) | volume: Volume adjustment for the added audio. 1.0 is original volume. (float) | mix: If True, mix new audio with existing. If False, replace existing audio. (bool) | . ",
    "url": "/nodetool_video.html#addaudio",
    
    "relUrl": "/nodetool_video.html#addaudio"
  },"281": {
    "doc": "nodetool.video",
    "title": "AddSubtitles",
    "content": "Add subtitles to a video. Use cases: . | Add translations or closed captions to videos | Include explanatory text or commentary in educational videos | Create lyric videos for music content | . Tags: video, subtitles, text, caption . Fields: . | video: The input video to add subtitles to. (VideoRef) | chunks: Audio chunks to add as subtitles. (list[nodetool.metadata.types.AudioChunk]) | font: The font to use. (SubtitleTextFont) | align: Vertical alignment of subtitles. (SubtitleTextAlignment) | font_size: The font size. (int) | font_color: The font color. (ColorRef) | . ",
    "url": "/nodetool_video.html#addsubtitles",
    
    "relUrl": "/nodetool_video.html#addsubtitles"
  },"282": {
    "doc": "nodetool.video",
    "title": "Blur",
    "content": "Apply a blur effect to a video. Use cases: . | Create a dreamy or soft focus effect | Obscure or censor specific areas of the video | Reduce noise or grain in low-quality footage | . Tags: video, blur, smooth, soften . Fields: . | video: The input video to apply blur effect. (VideoRef) | strength: The strength of the blur effect. Higher values create a stronger blur. (float) | . ",
    "url": "/nodetool_video.html#blur",
    
    "relUrl": "/nodetool_video.html#blur"
  },"283": {
    "doc": "nodetool.video",
    "title": "ChromaKey",
    "content": "Apply chroma key (green screen) effect to a video. Use cases: . | Remove green or blue background from video footage | Create special effects by compositing video onto new backgrounds | Produce professional-looking videos for presentations or marketing | . Tags: video, chroma key, green screen, compositing . Fields: . | video: The input video to apply chroma key effect. (VideoRef) | key_color: The color to key out (e.g., ‘#00FF00’ for green). (ColorRef) | similarity: Similarity threshold for the key color. (float) | blend: Blending of the keyed area edges. (float) | . ",
    "url": "/nodetool_video.html#chromakey",
    
    "relUrl": "/nodetool_video.html#chromakey"
  },"284": {
    "doc": "nodetool.video",
    "title": "ColorBalance",
    "content": "Adjust the color balance of a video. Use cases: . | Correct color casts in video footage | Enhance specific color tones for artistic effect | Normalize color balance across multiple video clips | . Tags: video, color, balance, adjustment . Fields: . | video: The input video to adjust color balance. (VideoRef) | red_adjust: Red channel adjustment factor. (float) | green_adjust: Green channel adjustment factor. (float) | blue_adjust: Blue channel adjustment factor. (float) | . ",
    "url": "/nodetool_video.html#colorbalance",
    
    "relUrl": "/nodetool_video.html#colorbalance"
  },"285": {
    "doc": "nodetool.video",
    "title": "Concat",
    "content": "Concatenate multiple video files into a single video, including audio when available. Tags: video, concat, merge, combine, audio, + . Fields: . | video_a: The first video to concatenate. (VideoRef) | video_b: The second video to concatenate. (VideoRef) | . ",
    "url": "/nodetool_video.html#concat",
    
    "relUrl": "/nodetool_video.html#concat"
  },"286": {
    "doc": "nodetool.video",
    "title": "CreateVideo",
    "content": "Combine a sequence of frames into a single video file. Use cases: . | Create time-lapse videos from image sequences | Compile processed frames back into a video | Generate animations from individual images | . Tags: video, frames, combine, sequence . Fields: . | frames: The frames to combine into a video. (list[nodetool.metadata.types.ImageRef]) | fps: The FPS of the output video. (float) | . ",
    "url": "/nodetool_video.html#createvideo",
    
    "relUrl": "/nodetool_video.html#createvideo"
  },"287": {
    "doc": "nodetool.video",
    "title": "Denoise",
    "content": "Apply noise reduction to a video. Use cases: . | Improve video quality by reducing unwanted noise | Enhance low-light footage | Prepare video for further processing or compression | . Tags: video, denoise, clean, enhance . Fields: . | video: The input video to denoise. (VideoRef) | strength: Strength of the denoising effect. Higher values mean more denoising. (float) | . ",
    "url": "/nodetool_video.html#denoise",
    
    "relUrl": "/nodetool_video.html#denoise"
  },"288": {
    "doc": "nodetool.video",
    "title": "ExtractAudio",
    "content": "Separate audio from a video file. Tags: video, audio, extract, separate . Fields: . | video: The input video to separate. (VideoRef) | . ",
    "url": "/nodetool_video.html#extractaudio",
    
    "relUrl": "/nodetool_video.html#extractaudio"
  },"289": {
    "doc": "nodetool.video",
    "title": "ExtractFrames",
    "content": "Extract frames from a video file using OpenCV. Use cases: . | Generate image sequences for further processing | Extract specific frame ranges from a video | Create thumbnails or previews from video content | . Tags: video, frames, extract, sequence . Fields: . | video: The input video to extract frames from. (VideoRef) | start: The frame to start extracting from. (int) | end: The frame to stop extracting from. (int) | . ",
    "url": "/nodetool_video.html#extractframes",
    
    "relUrl": "/nodetool_video.html#extractframes"
  },"290": {
    "doc": "nodetool.video",
    "title": "result_for_client",
    "content": "Args: . | result (dict[str, typing.Any]) | . Returns: dict[str, typing.Any] . ",
    "url": "/nodetool_video.html#result_for_client",
    
    "relUrl": "/nodetool_video.html#result_for_client"
  },"291": {
    "doc": "nodetool.video",
    "title": "Fps",
    "content": "Get the frames per second (FPS) of a video file. Use cases: . | Analyze video properties for quality assessment | Determine appropriate playback speed for video editing | Ensure compatibility with target display systems | . Tags: video, analysis, frames, fps . Fields: . | video: The input video to analyze for FPS. (VideoRef) | . ",
    "url": "/nodetool_video.html#fps",
    
    "relUrl": "/nodetool_video.html#fps"
  },"292": {
    "doc": "nodetool.video",
    "title": "Overlay",
    "content": "Overlay one video on top of another, including audio overlay when available. Tags: video, overlay, composite, picture-in-picture, audio . Fields: . | main_video: The main (background) video. (VideoRef) | overlay_video: The video to overlay on top. (VideoRef) | x: X-coordinate for overlay placement. (int) | y: Y-coordinate for overlay placement. (int) | scale: Scale factor for the overlay video. (float) | overlay_audio_volume: Volume of the overlay audio relative to the main audio. (float) | . ",
    "url": "/nodetool_video.html#overlay",
    
    "relUrl": "/nodetool_video.html#overlay"
  },"293": {
    "doc": "nodetool.video",
    "title": "ResizeNode",
    "content": "Resize a video to a specific width and height. Use cases: . | Adjust video resolution for different display requirements | Reduce file size by downscaling video | Prepare videos for specific platforms with size constraints | . Tags: video, resize, scale, dimensions . Fields: . | video: The input video to resize. (VideoRef) | width: The target width. Use -1 to maintain aspect ratio. (int) | height: The target height. Use -1 to maintain aspect ratio. (int) | . ",
    "url": "/nodetool_video.html#resizenode",
    
    "relUrl": "/nodetool_video.html#resizenode"
  },"294": {
    "doc": "nodetool.video",
    "title": "Reverse",
    "content": "Reverse the playback of a video. Use cases: . | Create artistic effects by playing video in reverse | Analyze motion or events in reverse order | Generate unique transitions or intros for video projects | . Tags: video, reverse, backwards, effect . Fields: . | video: The input video to reverse. (VideoRef) | . ",
    "url": "/nodetool_video.html#reverse",
    
    "relUrl": "/nodetool_video.html#reverse"
  },"295": {
    "doc": "nodetool.video",
    "title": "Rotate",
    "content": "Rotate a video by a specified angle. Use cases: . | Correct orientation of videos taken with a rotated camera | Create artistic effects by rotating video content | Adjust video for different display orientations | . Tags: video, rotate, orientation, transform . Fields: . | video: The input video to rotate. (VideoRef) | angle: The angle of rotation in degrees. (float) | . ",
    "url": "/nodetool_video.html#rotate",
    
    "relUrl": "/nodetool_video.html#rotate"
  },"296": {
    "doc": "nodetool.video",
    "title": "Saturation",
    "content": "Adjust the color saturation of a video. Use cases: . | Enhance color vibrancy in dull or flat-looking footage | Create stylistic effects by over-saturating or desaturating video | Correct oversaturated footage from certain cameras | . Tags: video, saturation, color, enhance . Fields: . | video: The input video to adjust saturation. (VideoRef) | saturation: Saturation level. 1.0 is original, &lt;1 decreases saturation, &gt;1 increases saturation. (float) | . ",
    "url": "/nodetool_video.html#saturation",
    
    "relUrl": "/nodetool_video.html#saturation"
  },"297": {
    "doc": "nodetool.video",
    "title": "SaveVideo",
    "content": "Save a video to a file. Use cases: . | Export processed video to a specific folder | Save video with a custom name | Create a copy of a video in a different location | . Tags: video, save, file, output . Fields: . | video: The video to save. (VideoRef) | folder: Name of the output folder. (FolderRef) | name: Name of the output video. You can use time and date variables to create unique names: %Y - Year %m - Month %d - Day %H - Hour %M - Minute %S - Second (str) | . ",
    "url": "/nodetool_video.html#savevideo",
    
    "relUrl": "/nodetool_video.html#savevideo"
  },"298": {
    "doc": "nodetool.video",
    "title": "required_inputs",
    "content": "Args: . ",
    "url": "/nodetool_video.html#required_inputs",
    
    "relUrl": "/nodetool_video.html#required_inputs"
  },"299": {
    "doc": "nodetool.video",
    "title": "SetSpeed",
    "content": "Adjust the playback speed of a video. Use cases: . | Create slow-motion effects by decreasing video speed | Generate time-lapse videos by increasing playback speed | Synchronize video duration with audio or other timing requirements | . Tags: video, speed, tempo, time . Fields: . | video: The input video to adjust speed. (VideoRef) | speed_factor: The speed adjustment factor. Values &gt; 1 speed up, &lt; 1 slow down. (float) | . ",
    "url": "/nodetool_video.html#setspeed",
    
    "relUrl": "/nodetool_video.html#setspeed"
  },"300": {
    "doc": "nodetool.video",
    "title": "Sharpness",
    "content": "Adjust the sharpness of a video. Use cases: . | Enhance detail in slightly out-of-focus footage | Correct softness introduced by video compression | Create stylistic effects by over-sharpening | . Tags: video, sharpen, enhance, detail . Fields: . | video: The input video to sharpen. (VideoRef) | luma_amount: Amount of sharpening to apply to luma (brightness) channel. (float) | chroma_amount: Amount of sharpening to apply to chroma (color) channels. (float) | . ",
    "url": "/nodetool_video.html#sharpness",
    
    "relUrl": "/nodetool_video.html#sharpness"
  },"301": {
    "doc": "nodetool.video",
    "title": "Stabilize",
    "content": "Apply video stabilization to reduce camera shake and jitter. Use cases: . | Improve quality of handheld or action camera footage | Smooth out panning and tracking shots | Enhance viewer experience by reducing motion sickness | . Tags: video, stabilize, smooth, shake-reduction . Fields: . | video: The input video to stabilize. (VideoRef) | smoothing: Smoothing strength. Higher values result in smoother but potentially more cropped video. (float) | crop_black: Whether to crop black borders that may appear after stabilization. (bool) | . ",
    "url": "/nodetool_video.html#stabilize",
    
    "relUrl": "/nodetool_video.html#stabilize"
  },"302": {
    "doc": "nodetool.video",
    "title": "Transition",
    "content": "Create a transition effect between two videos, including audio transition when available. Use cases: . | Create smooth transitions between video clips in a montage | Add professional-looking effects to video projects | Blend scenes together for creative storytelling | Smoothly transition between audio tracks of different video clips | . Tags: video, transition, effect, merge, audio . Fields: . | video_a: The first video in the transition. (VideoRef) | video_b: The second video in the transition. (VideoRef) | transition_type: Type of transition effect (TransitionType) | duration: Duration of the transition effect in seconds. (float) | . ",
    "url": "/nodetool_video.html#transition",
    
    "relUrl": "/nodetool_video.html#transition"
  },"303": {
    "doc": "nodetool.video",
    "title": "Trim",
    "content": "Trim a video to a specific start and end time. Use cases: . | Extract specific segments from a longer video | Remove unwanted parts from the beginning or end of a video | Create shorter clips from a full-length video | . Tags: video, trim, cut, segment . Fields: . | video: The input video to trim. (VideoRef) | start_time: The start time in seconds for the trimmed video. (float) | end_time: The end time in seconds for the trimmed video. Use -1 for the end of the video. (float) | . ",
    "url": "/nodetool_video.html#trim",
    
    "relUrl": "/nodetool_video.html#trim"
  },"304": {
    "doc": "nodetool.video",
    "title": "safe_unlink",
    "content": "Args: . | path (str) | . ",
    "url": "/nodetool_video.html#safe_unlink",
    
    "relUrl": "/nodetool_video.html#safe_unlink"
  },"305": {
    "doc": "nodetool.video",
    "title": "nodetool.video",
    "content": " ",
    "url": "/nodetool_video.html",
    
    "relUrl": "/nodetool_video.html"
  }
}
