# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.control
from nodetool.workflows.base_node import BaseNode


class Collect(GraphNode[nodetool.nodes.nodetool.control.Collect.OutputType]):
    """
    Collect items until the end of the stream and return them as a list.
    collector, aggregate, list, stream

    Use cases:
    - Gather results from multiple processing steps
    - Collect streaming data into batches
    - Aggregate outputs from parallel operations
    """

    input_item: Any | OutputHandle[Any] = connect_field(
        default=None, description="The input item to collect."
    )

    @property
    def out(self) -> "CollectOutputs":
        return CollectOutputs(self)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.nodetool.control.Collect

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


class CollectOutputs(OutputsProxy):
    @property
    def output(self) -> OutputHandle[list[Any]]:
        return typing.cast(OutputHandle[list[Any]], self["output"])


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.control
from nodetool.workflows.base_node import BaseNode


class ForEach(GraphNode[nodetool.nodes.nodetool.control.ForEach.OutputType]):
    """
    Iterate over a list and emit each item sequentially.
    iterator, loop, list, sequence

    Use cases:
    - Process each item of a collection in order
    - Drive downstream nodes with individual elements
    """

    input_list: list[Any] | OutputHandle[list[Any]] = connect_field(
        default=[], description="The list of items to iterate over."
    )

    @property
    def out(self) -> "ForEachOutputs":
        return ForEachOutputs(self)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.nodetool.control.ForEach

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


class ForEachOutputs(OutputsProxy):
    @property
    def output(self) -> OutputHandle[Any]:
        return typing.cast(OutputHandle[Any], self["output"])

    @property
    def index(self) -> OutputHandle[int]:
        return typing.cast(OutputHandle[int], self["index"])


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.control
from nodetool.workflows.base_node import BaseNode


class If(GraphNode[nodetool.nodes.nodetool.control.If.OutputType]):
    """
    Conditionally executes one of two branches based on a condition.
    control, flow, condition, logic, else, true, false, switch, toggle, flow-control

    Use cases:
    - Branch workflow based on conditions
    - Handle different cases in data processing
    - Implement decision logic
    """

    condition: bool | OutputHandle[bool] = connect_field(
        default=False, description="The condition to evaluate"
    )
    value: Any | OutputHandle[Any] = connect_field(
        default=None, description="The value to pass to the next node"
    )

    @property
    def out(self) -> "IfOutputs":
        return IfOutputs(self)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.nodetool.control.If

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


class IfOutputs(OutputsProxy):
    @property
    def if_true(self) -> OutputHandle[Any]:
        return typing.cast(OutputHandle[Any], self["if_true"])

    @property
    def if_false(self) -> OutputHandle[Any]:
        return typing.cast(OutputHandle[Any], self["if_false"])


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.control
from nodetool.workflows.base_node import BaseNode


class Reroute(SingleOutputGraphNode[Any], GraphNode[Any]):
    """
    Pass data through unchanged for tidier workflow layouts.
    reroute, passthrough, organize, tidy, flow, connection, redirect

    Use cases:
    - Organize complex workflows by routing connections
    - Create cleaner visual layouts
    - Redirect data flow without modification
    """

    input_value: Any | OutputHandle[Any] = connect_field(
        default=None, description="Value to pass through unchanged"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.nodetool.control.Reroute

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
