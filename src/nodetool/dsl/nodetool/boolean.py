# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class All(GraphNode[bool]):
    """
    Checks if all boolean values in a list are True.
    boolean, all, check, logic, condition, flow-control, branch


    Use cases:
    - Ensure all conditions in a set are met
    - Implement comprehensive checks
    - Validate multiple criteria simultaneously
    """

    values: list[bool] | OutputHandle[list[bool]] = connect_field(
        default=[], description="List of boolean values to check"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.All"


All.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean
import nodetool.nodes.nodetool.boolean


class Compare(GraphNode[bool]):
    """
    Compares two values using a specified comparison operator.
    compare, condition, logic

    Use cases:
    - Implement decision points in workflows
    - Filter data based on specific criteria
    - Create dynamic thresholds or limits
    """

    Comparison: typing.ClassVar[type] = (
        nodetool.nodes.nodetool.boolean.Compare.Comparison
    )
    a: Any | OutputHandle[Any] = connect_field(
        default=None, description="First value to compare"
    )
    b: Any | OutputHandle[Any] = connect_field(
        default=None, description="Second value to compare"
    )
    comparison: nodetool.nodes.nodetool.boolean.Compare.Comparison = Field(
        default=nodetool.nodes.nodetool.boolean.Compare.Comparison.EQUAL,
        description="Comparison operator to use",
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.Compare"


Compare.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class ConditionalSwitch(GraphNode[Any]):
    """
    Performs a conditional check on a boolean input and returns a value based on the result.
    if, condition, flow-control, branch, true, false, switch, toggle

    Use cases:
    - Implement conditional logic in workflows
    - Create dynamic branches in workflows
    - Implement decision points in workflows
    """

    condition: bool | OutputHandle[bool] = connect_field(
        default=False, description="The condition to check"
    )
    if_true: Any | OutputHandle[Any] = connect_field(
        default=None, description="The value to return if the condition is true"
    )
    if_false: Any | OutputHandle[Any] = connect_field(
        default=None, description="The value to return if the condition is false"
    )

    @property
    def output(self) -> OutputHandle[Any]:
        return typing.cast(OutputHandle[Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.ConditionalSwitch"


ConditionalSwitch.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class IsIn(GraphNode[bool]):
    """
    Checks if a value is present in a list of options.
    membership, contains, check

    Use cases:
    - Validate input against a set of allowed values
    - Implement category or group checks
    - Filter data based on inclusion criteria
    """

    value: Any | OutputHandle[Any] = connect_field(
        default=None, description="The value to check for membership"
    )
    options: list[Any] | OutputHandle[list[Any]] = connect_field(
        default=[], description="The list of options to check against"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.IsIn"


IsIn.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class IsNone(GraphNode[bool]):
    """
    Checks if a value is None.
    null, none, check

    Use cases:
    - Validate input presence
    - Handle optional parameters
    - Implement null checks in data processing
    """

    value: Any | OutputHandle[Any] = connect_field(
        default=None, description="The value to check for None"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.IsNone"


IsNone.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean
import nodetool.nodes.nodetool.boolean


class LogicalOperator(GraphNode[bool]):
    """
    Performs logical operations on two boolean inputs.
    boolean, logic, operator, condition, flow-control, branch, else, true, false, switch, toggle

    Use cases:
    - Combine multiple conditions in decision-making
    - Implement complex logical rules in workflows
    - Create advanced filters or triggers
    """

    BooleanOperation: typing.ClassVar[type] = (
        nodetool.nodes.nodetool.boolean.LogicalOperator.BooleanOperation
    )
    a: bool | OutputHandle[bool] = connect_field(
        default=False, description="First boolean input"
    )
    b: bool | OutputHandle[bool] = connect_field(
        default=False, description="Second boolean input"
    )
    operation: nodetool.nodes.nodetool.boolean.LogicalOperator.BooleanOperation = Field(
        default=nodetool.nodes.nodetool.boolean.LogicalOperator.BooleanOperation.AND,
        description="Logical operation to perform",
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.LogicalOperator"


LogicalOperator.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class Not(GraphNode[bool]):
    """
    Performs logical NOT operation on a boolean input.
    boolean, logic, not, invert, !, negation, condition, else, true, false, switch, toggle, flow-control, branch

    Use cases:
    - Invert a condition's result
    - Implement toggle functionality
    - Create opposite logic branches
    """

    value: bool | OutputHandle[bool] = connect_field(
        default=False, description="Boolean input to negate"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.Not"


Not.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.nodetool.boolean


class Some(GraphNode[bool]):
    """
    Checks if any boolean value in a list is True.
    boolean, any, check, logic, condition, flow-control, branch

    Use cases:
    - Check if at least one condition in a set is met
    - Implement optional criteria checks
    - Create flexible validation rules
    """

    values: list[bool] | OutputHandle[list[bool]] = connect_field(
        default=[], description="List of boolean values to check"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "nodetool.boolean.Some"


Some.model_rebuild(force=True)
