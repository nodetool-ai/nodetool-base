# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode


class CopyWorkspaceFile(GraphNode):
    """
    Copy a file within the workspace.
    workspace, file, copy, duplicate

    Use cases:
    - Create file backups in workspace
    - Duplicate files for different processing
    - Copy files to subdirectories
    """

    source: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative source path within workspace"
    )
    destination: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative destination path within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.CopyWorkspaceFile"


class CreateWorkspaceDirectory(GraphNode):
    """
    Create a directory in the workspace.
    workspace, directory, create, folder

    Use cases:
    - Organize workspace files into directories
    - Create output directories for generated files
    - Set up workspace structure
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to directory within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.CreateWorkspaceDirectory"


class DeleteWorkspaceFile(GraphNode):
    """
    Delete a file or directory from the workspace.
    workspace, file, delete, remove

    Use cases:
    - Clean up temporary files
    - Remove processed files
    - Clear workspace data
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file or directory within workspace"
    )
    recursive: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False, description="Delete directories recursively"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.DeleteWorkspaceFile"


class GetWorkspaceDir(GraphNode):
    """
    Get the current workspace directory path.
    workspace, directory, path

    Use cases:
    - Get the workspace path for reference
    - Display workspace location
    - Pass workspace path to other nodes
    """

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.GetWorkspaceDir"


class GetWorkspaceFileInfo(GraphNode):
    """
    Get information about a file in the workspace.
    workspace, file, info, metadata

    Use cases:
    - Get file size and timestamps
    - Check file type (file vs directory)
    - Inspect file metadata
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.GetWorkspaceFileInfo"


class GetWorkspaceFileSize(GraphNode):
    """
    Get file size in bytes for a workspace file.
    workspace, file, size, bytes

    Use cases:
    - Check file size before processing
    - Monitor generated file sizes
    - Validate file completeness
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.GetWorkspaceFileSize"


class IsWorkspaceDirectory(GraphNode):
    """
    Check if a path in the workspace is a directory.
    workspace, directory, check, type

    Use cases:
    - Distinguish directories from files
    - Validate directory paths
    - Filter paths by type
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path within workspace to check"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.IsWorkspaceDirectory"


class IsWorkspaceFile(GraphNode):
    """
    Check if a path in the workspace is a file.
    workspace, file, check, type

    Use cases:
    - Distinguish files from directories
    - Validate file types
    - Filter paths by type
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path within workspace to check"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.IsWorkspaceFile"


class JoinWorkspacePaths(GraphNode):
    """
    Join path components relative to workspace.
    workspace, path, join, combine

    Use cases:
    - Build file paths within workspace
    - Construct nested paths
    - Create organized file structures
    """

    paths: list[str] | GraphNode | tuple[GraphNode, str] = Field(
        default=[], description="Path components to join (relative to workspace)"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.JoinWorkspacePaths"


class ListWorkspaceFiles(GraphNode):
    """
    List files in the workspace directory matching a pattern.
    workspace, files, list, directory

    Use cases:
    - Get files for batch processing within workspace
    - Filter workspace files by extension or pattern
    - Discover generated files in workspace
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default=".",
        description="Relative path within workspace (use . for workspace root)",
    )
    pattern: str | GraphNode | tuple[GraphNode, str] = Field(
        default="*", description="File pattern to match (e.g. *.txt, *.json)"
    )
    recursive: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False, description="Search subdirectories recursively"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.ListWorkspaceFiles"


class MoveWorkspaceFile(GraphNode):
    """
    Move or rename a file within the workspace.
    workspace, file, move, rename

    Use cases:
    - Rename files in workspace
    - Move files to subdirectories
    - Reorganize workspace files
    """

    source: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative source path within workspace"
    )
    destination: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative destination path within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.MoveWorkspaceFile"


class ReadBinaryFile(GraphNode):
    """
    Read a binary file from the workspace as base64-encoded string.
    workspace, file, read, binary

    Use cases:
    - Read generated binary data
    - Load binary files for processing
    - Access non-text files
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.ReadBinaryFile"


class ReadTextFile(GraphNode):
    """
    Read a text file from the workspace.
    workspace, file, read, text

    Use cases:
    - Read configuration files
    - Load text data generated by previous nodes
    - Process text files in workspace
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )
    encoding: str | GraphNode | tuple[GraphNode, str] = Field(
        default="utf-8", description="Text encoding (utf-8, ascii, etc.)"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.ReadTextFile"


class SaveImageFile(GraphNode):
    """
    Save an image to a file in the workspace.
    workspace, image, save, file, output

    Use cases:
    - Save processed images to workspace
    - Export edited photos
    - Archive image results
    """

    image: types.ImageRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to save",
    )
    folder: str | GraphNode | tuple[GraphNode, str] = Field(
        default=".",
        description="Relative folder path within workspace (use . for workspace root)",
    )
    filename: str | GraphNode | tuple[GraphNode, str] = Field(
        default="image.png",
        description="\n        The name of the image file.\n        You can use time and date variables to create unique names:\n        %Y - Year\n        %m - Month\n        %d - Day\n        %H - Hour\n        %M - Minute\n        %S - Second\n        ",
    )
    overwrite: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False,
        description="Overwrite the file if it already exists, otherwise file will be renamed",
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.SaveImageFile"


class SaveVideoFile(GraphNode):
    """
    Save a video file to the workspace.
    workspace, video, save, file, output

    Use cases:
    - Save processed videos to workspace
    - Export video results
    - Archive video content

    The filename can include time and date variables:
    %Y - Year, %m - Month, %d - Day
    %H - Hour, %M - Minute, %S - Second
    """

    video: types.VideoRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.VideoRef(
            type="video", uri="", asset_id=None, data=None, duration=None, format=None
        ),
        description="The video to save",
    )
    folder: str | GraphNode | tuple[GraphNode, str] = Field(
        default=".",
        description="Relative folder path within workspace (use . for workspace root)",
    )
    filename: str | GraphNode | tuple[GraphNode, str] = Field(
        default="video.mp4",
        description="\n        Name of the file to save.\n        You can use time and date variables to create unique names:\n        %Y - Year\n        %m - Month\n        %d - Day\n        %H - Hour\n        %M - Minute\n        %S - Second\n        ",
    )
    overwrite: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False,
        description="Overwrite the file if it already exists, otherwise file will be renamed",
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.SaveVideoFile"


class WorkspaceFileExists(GraphNode):
    """
    Check if a file or directory exists in the workspace.
    workspace, file, exists, check

    Use cases:
    - Validate file presence before processing
    - Implement conditional logic based on file existence
    - Check for generated files
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path within workspace to check"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.WorkspaceFileExists"


class WriteBinaryFile(GraphNode):
    """
    Write binary data (base64-encoded) to a file in the workspace.
    workspace, file, write, binary, save

    Use cases:
    - Save binary data to workspace
    - Write decoded base64 data
    - Export binary results
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )
    content: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Base64-encoded binary content to write"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.WriteBinaryFile"


class WriteTextFile(GraphNode):
    """
    Write text to a file in the workspace.
    workspace, file, write, text, save

    Use cases:
    - Save generated text to workspace
    - Create configuration files
    - Export processed text data
    """

    path: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Relative path to file within workspace"
    )
    content: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Text content to write"
    )
    encoding: str | GraphNode | tuple[GraphNode, str] = Field(
        default="utf-8", description="Text encoding (utf-8, ascii, etc.)"
    )
    append: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False, description="Append to file instead of overwriting"
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.workspace.WriteTextFile"
