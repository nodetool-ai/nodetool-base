# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode


class AssetFolderInput(GraphNode):
    """
    Accepts an asset folder as a parameter for workflows.
    input, parameter, folder, path, folderpath, local_folder, filesystem
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.FolderRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.FolderRef(type="folder", uri="", asset_id=None, data=None),
        description="The folder to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.AssetFolderInput"


class AudioInput(GraphNode):
    """
    Accepts a reference to an audio asset for workflows, specified by an 'AudioRef'.  An 'AudioRef' points to audio data that can be used for playback, transcription, analysis, or processing by audio-capable models.
    input, parameter, audio, sound, voice, speech, asset

    Use cases:
    - Load an audio file for speech-to-text transcription.
    - Analyze sound for specific events or characteristics.
    - Provide audio input to models for tasks like voice recognition or music generation.
    - Process audio for enhancement or feature extraction.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.AudioRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.AudioRef(type="audio", uri="", asset_id=None, data=None),
        description="The audio to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.AudioInput"


class BooleanInput(GraphNode):
    """
    Accepts a boolean (true/false) value as a parameter for workflows.  This input is used for binary choices, enabling or disabling features, or controlling conditional logic paths.
    input, parameter, boolean, bool, toggle, switch, flag

    Use cases:
    - Toggle features or settings on or off.
    - Set binary flags to control workflow behavior.
    - Make conditional choices within a workflow (e.g., proceed if true).
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=False, description=None
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.BooleanInput"


class ChatInput(GraphNode):
    """
    Accepts a list of chat messages as input for workflows, typically representing a conversation history.  The input is structured as a sequence of 'Message' objects. The node processes this list to extract elements like the latest message content (text, image, audio, video, document), the history, and any associated tool calls.
    input, parameter, chat, message, conversation, prompt, history

    Use cases:
    - Provide user prompts or queries to a language model.
    - Supply conversational context (history) for multi-turn interactions.
    - Capture complex inputs that include text alongside other media types or tool requests.
    - Initiate or continue a chat-based workflow.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: list[types.Message] | GraphNode | tuple[GraphNode, str] = Field(
        default=[], description="The chat message to use as input."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.ChatInput"


class CollectionInput(GraphNode):
    """
    Accepts a reference to a specific data collection, typically within a vector database or similar storage system.
    The input is a 'Collection' object, which identifies the target collection for operations like data insertion, querying, or similarity search.
    Keywords: input, parameter, collection, database, vector_store, chroma, index

    Use cases:
    - Select a target vector database collection for indexing new documents.
    - Specify a collection to perform a similarity search or query against.
    - Choose a data source or destination that is represented as a named collection.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.Collection | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Collection(type="collection", name=""),
        description="The collection to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.CollectionInput"


class ColorInput(GraphNode):
    """
    Accepts a color value as a parameter for workflows.
    input, parameter, color, color_picker, color_input
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.ColorRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.ColorRef(type="color", value=None),
        description="The color to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.ColorInput"


class DocumentFileInput(GraphNode):
    """
    Accepts a local file path pointing to a document and converts it into a 'DocumentRef'.
    input, parameter, document, file, path, local_file, load

    Use cases:
    - Directly load a document (e.g., PDF, TXT, DOCX) from a specified local file path.
    - Convert a local file path into a 'DocumentRef' that can be consumed by other document-processing nodes.
    - Useful for development or workflows that have legitimate access to the local filesystem.
    - To provide an existing 'DocumentRef', use 'DocumentInput'.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The path to the document file."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.DocumentFileInput"


class DocumentInput(GraphNode):
    """
    Accepts a reference to a document asset for workflows, specified by a 'DocumentRef'.  A 'DocumentRef' points to a structured document (e.g., PDF, DOCX, TXT) which can be processed or analyzed. This node is used when the workflow needs to operate on a document as a whole entity, potentially including its structure and metadata, rather than just raw text.
    input, parameter, document, file, asset, reference

    Use cases:
    - Load a specific document (e.g., PDF, Word, text file) for content extraction or analysis.
    - Pass a document to models that are designed to process specific document formats.
    - Manage documents as distinct assets within a workflow.
    - If you have a local file path and need to convert it to a 'DocumentRef', consider using 'DocumentFileInput'.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.DocumentRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.DocumentInput"


class FilePathInput(GraphNode):
    """
    Accepts a local filesystem path (to a file or directory) as input for workflows.
    input, parameter, path, filepath, directory, local_file, filesystem

    Use cases:
    - Provide a local path to a specific file or directory for processing.
    - Specify an input or output location on the local filesystem for a development task.
    - Load local datasets or configuration files not managed as assets.
    - Not available in production: raises an error if used in a production environment.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The path to use as input."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.FilePathInput"


class FloatInput(GraphNode):
    """
    Accepts a floating-point number as a parameter for workflows, typically constrained by a minimum and maximum value.  This input allows for precise numeric settings, such as adjustments, scores, or any value requiring decimal precision.
    input, parameter, float, number, decimal, range

    Use cases:
    - Specify a numeric value within a defined range (e.g., 0.0 to 1.0).
    - Set thresholds, confidence scores, or scaling factors.
    - Configure continuous parameters like opacity, volume, or temperature.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: float | GraphNode | tuple[GraphNode, str] = Field(
        default=0.0, description=None
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )
    min: float | GraphNode | tuple[GraphNode, str] = Field(default=0, description=None)
    max: float | GraphNode | tuple[GraphNode, str] = Field(
        default=100, description=None
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.FloatInput"


class FolderPathInput(GraphNode):
    """
    Accepts a folder path as a parameter for workflows.
    input, parameter, folder, path, folderpath, local_folder, filesystem
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The folder path to use as input."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.FolderPathInput"


class HuggingFaceModelInput(GraphNode):
    """
    Accepts a Hugging Face model as a parameter for workflows.
    input, parameter, model, huggingface, hugging_face, model_name
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.HuggingFaceModel | GraphNode | tuple[GraphNode, str] = Field(
        default=types.HuggingFaceModel(
            type="hf.model",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="The Hugging Face model to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.HuggingFaceModelInput"


class ImageInput(GraphNode):
    """
    Accepts a reference to an image asset for workflows, specified by an 'ImageRef'.  An 'ImageRef' points to image data that can be used for display, analysis, or processing by vision models.
    input, parameter, image, picture, graphic, visual, asset

    Use cases:
    - Load an image for visual processing or analysis.
    - Provide an image as input to computer vision models (e.g., object detection, image classification).
    - Select an image for manipulation, enhancement, or inclusion in a document.
    - Display an image within a workflow interface.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.ImageRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.ImageInput"


import nodetool.metadata.types


class InferenceProviderInput(GraphNode):
    """
    Accepts an inference provider as a parameter for workflows.
    input, parameter, provider, inference, provider_name
    """

    InferenceProvider: typing.ClassVar[type] = nodetool.metadata.types.InferenceProvider
    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: nodetool.metadata.types.InferenceProvider = Field(
        default=nodetool.metadata.types.InferenceProvider.none,
        description="The inference provider to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.InferenceProviderInput"


class IntegerInput(GraphNode):
    """
    Accepts an integer (whole number) as a parameter for workflows, typically constrained by a minimum and maximum value.  This input is used for discrete numeric values like counts, indices, or iteration limits.
    input, parameter, integer, number, count, index, whole_number

    Use cases:
    - Specify counts or quantities (e.g., number of items, iterations).
    - Set index values for accessing elements in a list or array.
    - Configure discrete numeric parameters like age, steps, or quantity.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: int | GraphNode | tuple[GraphNode, str] = Field(default=0, description=None)
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )
    min: int | GraphNode | tuple[GraphNode, str] = Field(default=0, description=None)
    max: int | GraphNode | tuple[GraphNode, str] = Field(default=100, description=None)

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.IntegerInput"


class LanguageModelInput(GraphNode):
    """
    Accepts a language model as a parameter for workflows.
    input, parameter, model, language, model_name
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.LanguageModel | GraphNode | tuple[GraphNode, str] = Field(
        default=types.LanguageModel(
            type="language_model",
            provider=nodetool.metadata.types.Provider.Empty,
            id="",
            name="",
        ),
        description="The language model to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.LanguageModelInput"


class RealtimeAudioInput(GraphNode):
    """
    Accepts streaming audio data for workflows.
    input, parameter, audio, sound, voice, speech, asset
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: Any | GraphNode | tuple[GraphNode, str] = Field(
        default=None, description="The value of the input."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )
    audio: types.AudioRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.AudioRef(type="audio", uri="", asset_id=None, data=None),
        description="The audio to use as input.",
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.RealtimeAudioInput"


class StringInput(GraphNode):
    """
    Accepts a string value as a parameter for workflows.
    input, parameter, string, text, label, name, value

    Use cases:
    - Define a name for an entity or process.
    - Specify a label for a component or output.
    - Enter a short keyword or search term.
    - Provide a simple configuration value (e.g., an API key, a model name).
    - If you need to input multi-line text or the content of a file, use 'DocumentFileInput'.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: str | GraphNode | tuple[GraphNode, str] = Field(default="", description=None)
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.StringInput"


class StringListInput(GraphNode):
    """
    Accepts a list of strings as a parameter for workflows.
    input, parameter, string, text, label, name, value
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: list[str] | GraphNode | tuple[GraphNode, str] = Field(
        default=PydanticUndefined, description="The list of strings to use as input."
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.StringListInput"


class VideoInput(GraphNode):
    """
    Accepts a reference to a video asset for workflows, specified by a 'VideoRef'.  A 'VideoRef' points to video data that can be used for playback, analysis, frame extraction, or processing by video-capable models.
    input, parameter, video, movie, clip, visual, asset

    Use cases:
    - Load a video file for processing or content analysis.
    - Analyze video content for events, objects, or speech.
    - Extract frames or audio tracks from a video.
    - Provide video input to models that understand video data.
    """

    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The parameter name for the workflow."
    )
    value: types.VideoRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.VideoRef(
            type="video", uri="", asset_id=None, data=None, duration=None, format=None
        ),
        description="The video to use as input.",
    )
    description: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The description of the input for the workflow."
    )

    @classmethod
    def get_node_type(cls):
        return "nodetool.input.VideoInput"
