# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pandoc
import nodetool.nodes.lib.pandoc
import nodetool.nodes.lib.pandoc


class ConvertFile(GraphNode[str]):
    """
    Converts between different document formats using pandoc.
    convert, document, format, pandoc

    Use cases:
    - Convert between various document formats (Markdown, HTML, LaTeX, etc.)
    - Generate documentation in different formats
    - Create publication-ready documents
    """

    InputFormat: typing.ClassVar[type] = nodetool.nodes.lib.pandoc.InputFormat
    OutputFormat: typing.ClassVar[type] = nodetool.nodes.lib.pandoc.OutputFormat
    input_path: types.FilePath | OutputHandle[types.FilePath] = connect_field(
        default=types.FilePath(type="file_path", path=""),
        description="Path to the input file",
    )
    input_format: nodetool.nodes.lib.pandoc.InputFormat = Field(
        default=nodetool.nodes.lib.pandoc.InputFormat.MARKDOWN,
        description="Input format",
    )
    output_format: nodetool.nodes.lib.pandoc.OutputFormat = Field(
        default=nodetool.nodes.lib.pandoc.OutputFormat.PDF, description="Output format"
    )
    extra_args: list[str] | OutputHandle[list[str]] = connect_field(
        default=[], description="Additional pandoc arguments"
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.pandoc.ConvertFile"


ConvertFile.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pandoc
import nodetool.nodes.lib.pandoc
import nodetool.nodes.lib.pandoc


class ConvertText(GraphNode[str]):
    """
    Converts text content between different document formats using pandoc.
    convert, text, format, pandoc

    Use cases:
    - Convert text content between various formats (Markdown, HTML, LaTeX, etc.)
    - Transform content without saving to disk
    - Process text snippets in different formats
    """

    InputFormat: typing.ClassVar[type] = nodetool.nodes.lib.pandoc.InputFormat
    OutputFormat: typing.ClassVar[type] = nodetool.nodes.lib.pandoc.OutputFormat
    content: str | OutputHandle[str] = connect_field(
        default=PydanticUndefined, description="Text content to convert"
    )
    input_format: nodetool.nodes.lib.pandoc.InputFormat = Field(
        default=nodetool.nodes.lib.pandoc.InputFormat(PydanticUndefined),
        description="Input format",
    )
    output_format: nodetool.nodes.lib.pandoc.OutputFormat = Field(
        default=nodetool.nodes.lib.pandoc.OutputFormat(PydanticUndefined),
        description="Output format",
    )
    extra_args: list[str] | OutputHandle[list[str]] = connect_field(
        default=[], description="Additional pandoc arguments"
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.pandoc.ConvertText"


ConvertText.model_rebuild(force=True)
