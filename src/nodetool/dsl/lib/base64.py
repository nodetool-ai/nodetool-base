# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.base64
from nodetool.workflows.base_node import BaseNode


class Decode(SingleOutputGraphNode[str], GraphNode[str]):
    """Decodes Base64 text to plain string.
    base64, decode, string

    Use cases:
    - Read encoded data
    - Extract original text from Base64
    """

    data: str | OutputHandle[str] = connect_field(
        default="", description="Base64 encoded text"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.base64.Decode

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.base64
from nodetool.workflows.base_node import BaseNode


class Encode(SingleOutputGraphNode[str], GraphNode[str]):
    """Encodes text to Base64 format.
    base64, encode, string

    Use cases:
    - Prepare text for transmission
    - Embed data in JSON or HTML
    """

    text: str | OutputHandle[str] = connect_field(
        default="", description="Text to encode"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.base64.Encode

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
