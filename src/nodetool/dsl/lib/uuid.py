# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid
import nodetool.nodes.lib.uuid


class FormatUUID(GraphNode[str]):
    """Format a UUID string in different representations.
    uuid, format, convert, hex, urn, identifier

    Use cases:
    - Convert UUID to different formats
    - Generate URN representations
    - Format UUIDs for specific use cases
    """

    UUIDFormat: typing.ClassVar[type] = nodetool.nodes.lib.uuid.UUIDFormat
    uuid_string: str | OutputHandle[str] = connect_field(
        default="", description="UUID string to format"
    )
    format: nodetool.nodes.lib.uuid.UUIDFormat = Field(
        default=nodetool.nodes.lib.uuid.UUIDFormat.STANDARD,
        description="Output format (standard, hex, urn, int, bytes_hex)",
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.FormatUUID"


FormatUUID.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class GenerateUUID1(GraphNode[str]):
    """Generate a time-based UUID (version 1).
    uuid, time, identifier, unique, guid, timestamp

    Use cases:
    - Create sortable unique identifiers
    - Generate time-ordered IDs
    - Track creation timestamps in IDs
    """

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID1"


GenerateUUID1.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class GenerateUUID3(GraphNode[str]):
    """Generate a name-based UUID using MD5 (version 3).
    uuid, name, identifier, unique, guid, md5, deterministic

    Use cases:
    - Create deterministic IDs from names
    - Generate consistent identifiers for the same input
    - Map names to unique identifiers
    """

    namespace: str | OutputHandle[str] = connect_field(
        default="dns", description="Namespace (dns, url, oid, x500, or a UUID string)"
    )
    name: str | OutputHandle[str] = connect_field(
        default="", description="Name to generate UUID from"
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID3"


GenerateUUID3.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class GenerateUUID4(GraphNode[str]):
    """Generate a random UUID (version 4).
    uuid, random, identifier, unique, guid

    Use cases:
    - Create unique identifiers for records
    - Generate session IDs
    - Produce random unique keys
    """

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID4"


GenerateUUID4.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class GenerateUUID5(GraphNode[str]):
    """Generate a name-based UUID using SHA-1 (version 5).
    uuid, name, identifier, unique, guid, sha1, deterministic

    Use cases:
    - Create deterministic IDs from names (preferred over UUID3)
    - Generate consistent identifiers for the same input
    - Map names to unique identifiers with better collision resistance
    """

    namespace: str | OutputHandle[str] = connect_field(
        default="dns", description="Namespace (dns, url, oid, x500, or a UUID string)"
    )
    name: str | OutputHandle[str] = connect_field(
        default="", description="Name to generate UUID from"
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID5"


GenerateUUID5.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class IsValidUUID(GraphNode[bool]):
    """Check if a string is a valid UUID.
    uuid, validate, check, verify, identifier

    Use cases:
    - Validate user input
    - Filter valid UUIDs from a dataset
    - Conditional workflow based on UUID validity
    """

    uuid_string: str | OutputHandle[str] = connect_field(
        default="", description="String to check"
    )

    @property
    def output(self) -> OutputHandle[bool]:
        return typing.cast(OutputHandle[bool], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.IsValidUUID"


IsValidUUID.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.uuid


class ParseUUID(GraphNode[dict]):
    """Parse and validate a UUID string.
    uuid, parse, validate, check, identifier

    Use cases:
    - Validate UUID format
    - Normalize UUID strings
    - Extract UUID version information
    """

    uuid_string: str | OutputHandle[str] = connect_field(
        default="", description="UUID string to parse"
    )

    @property
    def output(self) -> OutputHandle[dict]:
        return typing.cast(OutputHandle[dict], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.ParseUUID"


ParseUUID.model_rebuild(force=True)
