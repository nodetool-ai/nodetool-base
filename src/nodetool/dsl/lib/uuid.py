# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import nodetool.nodes.lib.uuid


class FormatUUID(GraphNode):
    """Format a UUID string in different representations.
    uuid, format, convert, hex, urn, identifier

    Use cases:
    - Convert UUID to different formats
    - Generate URN representations
    - Format UUIDs for specific use cases
    """

    UUIDFormat: typing.ClassVar[type] = nodetool.nodes.lib.uuid.UUIDFormat
    uuid_string: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="UUID string to format"
    )
    format: nodetool.nodes.lib.uuid.UUIDFormat = Field(
        default=nodetool.nodes.lib.uuid.UUIDFormat.STANDARD,
        description="Output format (standard, hex, urn, int, bytes_hex)",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.FormatUUID"


class GenerateUUID1(GraphNode):
    """Generate a time-based UUID (version 1).
    uuid, time, identifier, unique, guid, timestamp

    Use cases:
    - Create sortable unique identifiers
    - Generate time-ordered IDs
    - Track creation timestamps in IDs
    """

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID1"


class GenerateUUID3(GraphNode):
    """Generate a name-based UUID using MD5 (version 3).
    uuid, name, identifier, unique, guid, md5, deterministic

    Use cases:
    - Create deterministic IDs from names
    - Generate consistent identifiers for the same input
    - Map names to unique identifiers
    """

    namespace: str | GraphNode | tuple[GraphNode, str] = Field(
        default="dns", description="Namespace (dns, url, oid, x500, or a UUID string)"
    )
    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Name to generate UUID from"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID3"


class GenerateUUID4(GraphNode):
    """Generate a random UUID (version 4).
    uuid, random, identifier, unique, guid

    Use cases:
    - Create unique identifiers for records
    - Generate session IDs
    - Produce random unique keys
    """

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID4"


class GenerateUUID5(GraphNode):
    """Generate a name-based UUID using SHA-1 (version 5).
    uuid, name, identifier, unique, guid, sha1, deterministic

    Use cases:
    - Create deterministic IDs from names (preferred over UUID3)
    - Generate consistent identifiers for the same input
    - Map names to unique identifiers with better collision resistance
    """

    namespace: str | GraphNode | tuple[GraphNode, str] = Field(
        default="dns", description="Namespace (dns, url, oid, x500, or a UUID string)"
    )
    name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="Name to generate UUID from"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.GenerateUUID5"


class IsValidUUID(GraphNode):
    """Check if a string is a valid UUID.
    uuid, validate, check, verify, identifier

    Use cases:
    - Validate user input
    - Filter valid UUIDs from a dataset
    - Conditional workflow based on UUID validity
    """

    uuid_string: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="String to check"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.IsValidUUID"


class ParseUUID(GraphNode):
    """Parse and validate a UUID string.
    uuid, parse, validate, check, identifier

    Use cases:
    - Validate UUID format
    - Normalize UUID strings
    - Extract UUID version information
    """

    uuid_string: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="UUID string to parse"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.uuid.ParseUUID"
