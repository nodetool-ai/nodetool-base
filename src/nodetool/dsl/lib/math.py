# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Add(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Adds two numbers.
    math, add, plus
    """

    a: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    b: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Add

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Cosine(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Computes cosine of the given angle in radians.
    math, cosine, trig
    """

    angle_rad: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Cosine

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Divide(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Divides A by B.
    math, divide, division, quotient
    """

    a: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    b: int | float | OutputHandle[int | float] = connect_field(
        default=1.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Divide

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class MathFunction(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Performs a selected unary math operation on an input.
    math, negate, absolute, square, cube, square_root, cube_root, sine, cosine, tangent, arcsine, arccosine, arctangent, log
    """

    Operation: typing.ClassVar[type] = nodetool.nodes.lib.math.MathFunction.Operation

    input: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    operation: nodetool.nodes.lib.math.MathFunction.Operation = Field(
        default=nodetool.nodes.lib.math.MathFunction.Operation.NEGATE,
        description="Unary operation to perform",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.MathFunction

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Modulus(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Computes A modulo B.
    math, modulus, modulo, remainder
    """

    a: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    b: int | float | OutputHandle[int | float] = connect_field(
        default=1.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Modulus

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Multiply(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Multiplies two numbers.
    math, multiply, product
    """

    a: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    b: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Multiply

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Power(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Raises base to the given exponent.
    math, power, exponent
    """

    base: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    exponent: int | float | OutputHandle[int | float] = connect_field(
        default=1.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Power

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Sine(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Computes sine of the given angle in radians.
    math, sine, trig
    """

    angle_rad: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Sine

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Sqrt(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Computes square root of x.
    math, sqrt, square_root
    """

    x: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Sqrt

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.math
from nodetool.workflows.base_node import BaseNode


class Subtract(SingleOutputGraphNode[int | float], GraphNode[int | float]):
    """

    Subtracts B from A.
    math, subtract, minus
    """

    a: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )
    b: int | float | OutputHandle[int | float] = connect_field(
        default=0.0, description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.math.Subtract

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
