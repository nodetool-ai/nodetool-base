# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class AdaptiveContrast(
    SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]
):
    """
    Applies localized contrast enhancement using adaptive techniques.
    image, contrast, enhance

    Use cases:
    - Improve visibility in images with varying lighting conditions
    - Prepare images for improved feature detection in computer vision
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the contrast for.",
    )
    clip_limit: float | OutputHandle[float] = connect_field(
        default=2.0, description="Clip limit for adaptive contrast."
    )
    grid_size: int | OutputHandle[int] = connect_field(
        default=8, description="Grid size for adaptive contrast."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.AdaptiveContrast

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class AutoContrast(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Automatically adjusts image contrast for enhanced visual quality.
    image, contrast, balance

    Use cases:
    - Enhance image clarity for better visual perception
    - Pre-process images for computer vision tasks
    - Improve photo aesthetics in editing workflows
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the contrast for.",
    )
    cutoff: int | OutputHandle[int] = connect_field(
        default=0,
        description="Represents the percentage of pixels to ignore at both the darkest and lightest ends of the histogram. A cutoff value of 5 means ignoring the darkest 5% and the lightest 5% of pixels, enhancing overall contrast by stretching the remaining pixel values across the full brightness range.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.AutoContrast

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Brightness(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Adjusts overall image brightness to lighten or darken.
    image, brightness, enhance

    Use cases:
    - Correct underexposed or overexposed photographs
    - Enhance visibility of dark image regions
    - Prepare images for consistent display across devices
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the brightness for.",
    )
    factor: float | int | OutputHandle[float | int] = connect_field(
        default=1.0, description="Factor to adjust the brightness. 1.0 means no change."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Brightness

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Color(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Adjusts color intensity of an image.
    image, color, enhance

    Use cases:
    - Enhance color vibrancy in photographs
    - Correct color imbalances in digital images
    - Prepare images for consistent brand color representation
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the brightness for.",
    )
    factor: float | OutputHandle[float] = connect_field(
        default=1.0, description="Factor to adjust the contrast. 1.0 means no change."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Color

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Contrast(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Adjusts image contrast to modify light-dark differences.
    image, contrast, enhance

    Use cases:
    - Enhance visibility of details in low-contrast images
    - Prepare images for visual analysis or recognition tasks
    - Create dramatic effects in artistic photography
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the brightness for.",
    )
    factor: float | OutputHandle[float] = connect_field(
        default=1.0, description="Factor to adjust the contrast. 1.0 means no change."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Contrast

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Detail(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Enhances fine details in images.
    image, detail, enhance

    Use cases:
    - Improve clarity of textural elements in photographs
    - Enhance visibility of small features for analysis
    - Prepare images for high-resolution display or printing
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to detail.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Detail

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class EdgeEnhance(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Enhances edge visibility by increasing contrast along boundaries.
    image, edge, enhance

    Use cases:
    - Improve object boundary detection for computer vision
    - Highlight structural elements in technical drawings
    - Prepare images for feature extraction in image analysis
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to edge enhance.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.EdgeEnhance

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Equalize(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Enhances image contrast by equalizing intensity distribution.
    image, contrast, histogram

    Use cases:
    - Improve visibility in poorly lit images
    - Enhance details for image analysis tasks
    - Normalize image data for machine learning
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to equalize.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Equalize

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class RankFilter(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Applies rank-based filtering to enhance or smooth image features.
    image, filter, enhance

    Use cases:
    - Reduce noise while preserving edges in images
    - Enhance specific image features based on local intensity
    - Pre-process images for improved segmentation results
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to rank filter.",
    )
    size: int | OutputHandle[int] = connect_field(
        default=3, description="Rank filter size."
    )
    rank: int | OutputHandle[int] = connect_field(
        default=3, description="Rank filter rank."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.RankFilter

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Sharpen(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Enhances image detail by intensifying local pixel contrast.
    image, sharpen, clarity

    Use cases:
    - Improve clarity of photographs for print or display
    - Refine texture details in product photography
    - Enhance readability of text in document images
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to sharpen.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Sharpen

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class Sharpness(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Adjusts image sharpness to enhance or reduce detail clarity.
    image, clarity, sharpness

    Use cases:
    - Enhance photo details for improved visual appeal
    - Refine images for object detection tasks
    - Correct slightly blurred images
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the brightness for.",
    )
    factor: float | OutputHandle[float] = connect_field(
        default=1.0, description="Factor to adjust the contrast. 1.0 means no change."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.Sharpness

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.enhance
from nodetool.workflows.base_node import BaseNode


class UnsharpMask(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Sharpens images using the unsharp mask technique.
    image, sharpen, enhance

    Use cases:
    - Enhance edge definition in photographs
    - Improve perceived sharpness of digital artwork
    - Prepare images for high-quality printing or display
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to unsharp mask.",
    )
    radius: int | OutputHandle[int] = connect_field(
        default=2, description="Unsharp mask radius."
    )
    percent: int | OutputHandle[int] = connect_field(
        default=150, description="Unsharp mask percent."
    )
    threshold: int | OutputHandle[int] = connect_field(
        default=3, description="Unsharp mask threshold."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.enhance.UnsharpMask

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
