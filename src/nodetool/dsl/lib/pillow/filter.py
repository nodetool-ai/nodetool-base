# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Blur(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply a Gaussian blur effect to an image.
    image, filter, blur

    - Soften images or reduce noise and detail
    - Make focal areas stand out by blurring surroundings
    - Protect privacy by blurring sensitive information
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to blur.",
    )
    radius: int | OutputHandle[int] = connect_field(
        default=2, description="Blur radius."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Blur

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Canny(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply Canny edge detection to an image.
    image, filter, edges

    - Highlight areas of rapid intensity change
    - Outline object boundaries and structure
    - Enhance inputs for object detection and image segmentation
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to canny.",
    )
    low_threshold: int | OutputHandle[int] = connect_field(
        default=100, description="Low threshold."
    )
    high_threshold: int | OutputHandle[int] = connect_field(
        default=200, description="High threshold."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Canny

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Contour(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply a contour filter to highlight image edges.
    image, filter, contour

    - Extract key features from complex images
    - Aid pattern recognition and object detection
    - Create stylized contour sketch art effects
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to contour.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Contour

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class ConvertToGrayscale(
    SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]
):
    """
    Convert an image to grayscale.
    image, grayscale

    - Simplify images for feature and edge detection
    - Prepare images for shape-based machine learning
    - Create vintage or monochrome aesthetic effects
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to convert.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.ConvertToGrayscale

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Emboss(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply an emboss filter for a 3D raised effect.
    image, filter, emboss

    - Add texture and depth to photos
    - Create visually interesting graphics
    - Incorporate unique effects in digital artwork
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to emboss.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Emboss

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Expand(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Add a border around an image to increase its size.
    image, border, expand

    - Make images stand out by adding a colored border
    - Create framed photo effects
    - Separate image content from surroundings
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to expand.",
    )
    border: int | OutputHandle[int] = connect_field(
        default=0, description="Border size."
    )
    fill: int | OutputHandle[int] = connect_field(default=0, description="Fill color.")

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Expand

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class FindEdges(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Detect and highlight edges in an image.
    image, filter, edges

    - Analyze structural patterns in images
    - Aid object detection in computer vision
    - Detect important features like corners and ridges
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to find edges.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.FindEdges

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode
import nodetool.nodes.lib.pillow.filter


class GetChannel(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Extract a specific color channel from an image.
    image, color, channel, isolate, extract

    - Isolate color information for image analysis
    - Manipulate specific color components in graphic design
    - Enhance or reduce visibility of certain colors
    """

    ChannelEnum: typing.ClassVar[type] = (
        nodetool.nodes.lib.pillow.filter.GetChannel.ChannelEnum
    )
    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to get the channel from.",
    )
    channel: nodetool.nodes.lib.pillow.filter.GetChannel.ChannelEnum = Field(
        default=nodetool.nodes.lib.pillow.filter.GetChannel.ChannelEnum.RED,
        description=None,
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.GetChannel

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Invert(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Invert the colors of an image.
    image, filter, invert

    - Create negative versions of images for visual effects
    - Analyze image data by bringing out hidden details
    - Preprocess images for operations that work better on inverted colors
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to adjust the brightness for.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Invert

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Posterize(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Reduce the number of colors in an image for a poster-like effect.
    image, filter, posterize

    - Create graphic art by simplifying image colors
    - Apply artistic effects to photographs
    - Generate visually compelling content for advertising
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to posterize.",
    )
    bits: int | OutputHandle[int] = connect_field(
        default=4, description="Number of bits to posterize to."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Posterize

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Smooth(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply smoothing to reduce image noise and detail.
    image, filter, smooth

    - Enhance visual aesthetics of images
    - Improve object detection by reducing irrelevant details
    - Aid facial recognition by simplifying images
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to smooth.",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Smooth

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.pillow.filter
from nodetool.workflows.base_node import BaseNode


class Solarize(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """
    Apply a solarize effect to partially invert image tones.
    image, filter, solarize

    - Create surreal artistic photo effects
    - Enhance visual data by making certain elements more prominent
    - Add a unique style to images for graphic design
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to solarize.",
    )
    threshold: int | OutputHandle[int] = connect_field(
        default=128, description="Threshold for solarization."
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.pillow.filter.Solarize

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
