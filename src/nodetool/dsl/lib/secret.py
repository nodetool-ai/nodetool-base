# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.secret


class GetSecret(GraphNode[str | None]):
    """
    Get a secret value from configuration.
    secrets, credentials, configuration
    """

    name: str | OutputHandle[str] = connect_field(
        default="", description="Secret key name"
    )
    default: str | OutputHandle[str] | None = connect_field(
        default=None, description="Default value if not found"
    )

    @property
    def output(self) -> OutputHandle[str | None]:
        return typing.cast(OutputHandle[str | None], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.secret.GetSecret"


GetSecret.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.secret


class SetSecret(GraphNode[NoneType]):
    """
    Set a secret value and persist it.
    secrets, credentials, configuration
    """

    name: str | OutputHandle[str] = connect_field(
        default="", description="Secret key name"
    )
    value: str | OutputHandle[str] = connect_field(
        default="", description="Secret value"
    )

    @property
    def output(self) -> OutputHandle[NoneType]:
        return typing.cast(OutputHandle[NoneType], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.secret.SetSecret"


SetSecret.model_rebuild(force=True)
