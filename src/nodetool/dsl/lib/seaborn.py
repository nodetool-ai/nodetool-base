# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.seaborn


class ChartRenderer(GraphNode[types.ImageRef]):
    """
    Node responsible for rendering chart configurations into image format using seaborn.
    chart, seaborn, plot, visualization, data
    """

    chart_config: types.ChartConfig | OutputHandle[types.ChartConfig] = connect_field(
        default=types.ChartConfig(
            type="chart_config",
            title="",
            x_label="",
            y_label="",
            legend=True,
            data=types.ChartData(
                type="chart_data", series=[], row=None, col=None, col_wrap=None
            ),
            height=None,
            aspect=None,
            x_lim=None,
            y_lim=None,
            x_scale=None,
            y_scale=None,
            legend_position="auto",
            palette=None,
            hue_order=None,
            hue_norm=None,
            sizes=None,
            size_order=None,
            size_norm=None,
            marginal_kws=None,
            joint_kws=None,
            diag_kind=None,
            corner=False,
            center=None,
            vmin=None,
            vmax=None,
            cmap=None,
            annot=False,
            fmt=".2g",
            square=False,
        ),
        description="The chart configuration to render.",
    )
    width: int | OutputHandle[int] = connect_field(
        default=640, description="The width of the chart in pixels."
    )
    height: int | OutputHandle[int] = connect_field(
        default=480, description="The height of the chart in pixels."
    )
    data: Any | OutputHandle[Any] = connect_field(
        default=None, description="The data to visualize as a pandas DataFrame."
    )
    despine: bool | OutputHandle[bool] = connect_field(
        default=True, description="Whether to remove top and right spines."
    )
    trim_margins: bool | OutputHandle[bool] = connect_field(
        default=True, description="Whether to use tight layout for margins."
    )

    @property
    def output(self) -> OutputHandle[types.ImageRef]:
        return typing.cast(OutputHandle[types.ImageRef], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.seaborn.ChartRenderer"


ChartRenderer.model_rebuild(force=True)
