# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class AddHeading(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Adds a heading to the document
    document, docx, heading, format
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to add the heading to",
    )
    text: str | OutputHandle[str] = connect_field(
        default="", description="The heading text"
    )
    level: int | OutputHandle[int] = connect_field(
        default=1, description="Heading level (1-9)"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.AddHeading

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class AddImage(SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]):
    """
    Adds an image to the document
    document, docx, image, format
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to add the image to",
    )
    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to add",
    )
    width: float | OutputHandle[float] = connect_field(
        default=0, description="Image width in inches"
    )
    height: float | OutputHandle[float] = connect_field(
        default=0, description="Image height in inches"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.AddImage

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class AddPageBreak(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Adds a page break to the document
    document, docx, format, layout
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to add the page break to",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.AddPageBreak

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode
import nodetool.nodes.lib.docx


class AddParagraph(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Adds a paragraph of text to the document
    document, docx, text, format
    """

    ParagraphAlignment: typing.ClassVar[type] = (
        nodetool.nodes.lib.docx.ParagraphAlignment
    )
    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to add the paragraph to",
    )
    text: str | OutputHandle[str] = connect_field(
        default="", description="The paragraph text"
    )
    alignment: nodetool.nodes.lib.docx.ParagraphAlignment = Field(
        default=nodetool.nodes.lib.docx.ParagraphAlignment.LEFT,
        description="Text alignment",
    )
    bold: bool | OutputHandle[bool] = connect_field(
        default=False, description="Make text bold"
    )
    italic: bool | OutputHandle[bool] = connect_field(
        default=False, description="Make text italic"
    )
    font_size: int | OutputHandle[int] = connect_field(
        default=12, description="Font size in points"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.AddParagraph

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class AddTable(SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]):
    """
    Adds a table to the document
    document, docx, table, format
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to add the table to",
    )
    data: types.DataframeRef | OutputHandle[types.DataframeRef] = connect_field(
        default=types.DataframeRef(
            type="dataframe", uri="", asset_id=None, data=None, columns=None
        ),
        description="The data to add to the table",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.AddTable

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class CreateDocument(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Creates a new Word document
    document, docx, file, create
    """

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.CreateDocument

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class LoadWordDocument(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Loads a Word document from disk
    document, docx, file, load, input
    """

    path: str | OutputHandle[str] = connect_field(
        default="", description="Path to the document to load"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.LoadWordDocument

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class SaveDocument(SingleOutputGraphNode[typing.Any], GraphNode[typing.Any]):
    """
    Writes the document to a file
    document, docx, file, save, output
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to write",
    )
    path: types.FilePath | OutputHandle[types.FilePath] = connect_field(
        default=types.FilePath(type="file_path", path=""),
        description="The folder to write the document to.",
    )
    filename: str | OutputHandle[str] = connect_field(
        default="",
        description="\n        The filename to write the document to.\n        You can use time and date variables to create unique names:\n        %Y - Year\n        %m - Month\n        %d - Day\n        %H - Hour\n        %M - Minute\n        %S - Second\n        ",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.SaveDocument

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.docx
from nodetool.workflows.base_node import BaseNode


class SetDocumentProperties(
    SingleOutputGraphNode[types.DocumentRef], GraphNode[types.DocumentRef]
):
    """
    Sets document metadata properties
    document, docx, metadata, properties
    """

    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="The document to modify",
    )
    title: str | OutputHandle[str] = connect_field(
        default="", description="Document title"
    )
    author: str | OutputHandle[str] = connect_field(
        default="", description="Document author"
    )
    subject: str | OutputHandle[str] = connect_field(
        default="", description="Document subject"
    )
    keywords: str | OutputHandle[str] = connect_field(
        default="", description="Document keywords"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.docx.SetDocumentProperties

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
