# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode


class CreateTable(GraphNode):
    """
    Create a new SQLite table with specified columns.
    sqlite, database, table, create, schema

    Use cases:
    - Initialize database schema for flashcards
    - Set up tables for persistent storage
    - Create memory structures for agents
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    table_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="flashcards", description="Name of the table to create"
    )
    columns: types.RecordType | GraphNode | tuple[GraphNode, str] = Field(
        default=types.RecordType(type="record_type", columns=[]),
        description="Column definitions",
    )
    add_primary_key: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=True,
        description="Automatically make first integer column PRIMARY KEY AUTOINCREMENT",
    )
    if_not_exists: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=True, description="Only create table if it doesn't exist"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.CreateTable"


class Delete(GraphNode):
    """
    Delete records from a SQLite table.
    sqlite, database, delete, remove, drop

    Use cases:
    - Remove flashcards
    - Delete agent memory
    - Clean up old data
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    table_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="flashcards", description="Name of the table to delete from"
    )
    where: str | GraphNode | tuple[GraphNode, str] = Field(
        default="",
        description="WHERE clause (without 'WHERE' keyword), e.g., 'id = 1'. REQUIRED for safety.",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.Delete"


class ExecuteSQL(GraphNode):
    """
    Execute arbitrary SQL statements for advanced operations.
    sqlite, database, sql, execute, custom

    Use cases:
    - Complex queries with joins
    - Aggregate functions (COUNT, SUM, AVG)
    - Custom SQL operations
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    sql: str | GraphNode | tuple[GraphNode, str] = Field(
        default="SELECT * FROM flashcards", description="SQL statement to execute"
    )
    parameters: list[Any] | GraphNode | tuple[GraphNode, str] = Field(
        default=[], description="Parameters for parameterized queries (use ? in SQL)"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.ExecuteSQL"


class GetDatabasePath(GraphNode):
    """
    Get the full path to a SQLite database file.
    sqlite, database, path, location

    Use cases:
    - Reference database location
    - Verify database exists
    - Pass path to external tools
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.GetDatabasePath"


class Insert(GraphNode):
    """
    Insert a record into a SQLite table.
    sqlite, database, insert, add, record

    Use cases:
    - Add new flashcards to database
    - Store agent observations
    - Persist workflow results
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    table_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="flashcards", description="Name of the table to insert into"
    )
    data: dict[str, Any] | GraphNode | tuple[GraphNode, str] = Field(
        default={"content": "example"},
        description="Data to insert as dict (column: value)",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.Insert"


class Query(GraphNode):
    """
    Query records from a SQLite table.
    sqlite, database, query, select, search, retrieve

    Use cases:
    - Retrieve flashcards for review
    - Search agent memory
    - Fetch stored data
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    table_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="flashcards", description="Name of the table to query"
    )
    where: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="WHERE clause (without 'WHERE' keyword), e.g., 'id = 1'"
    )
    columns: str | GraphNode | tuple[GraphNode, str] = Field(
        default="*", description="Columns to select (comma-separated or '*' for all)"
    )
    order_by: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="ORDER BY clause (without 'ORDER BY' keyword)"
    )
    limit: int | GraphNode | tuple[GraphNode, str] = Field(
        default=0, description="Maximum number of rows to return (0 = no limit)"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.Query"


class Update(GraphNode):
    """
    Update records in a SQLite table.
    sqlite, database, update, modify, change

    Use cases:
    - Update flashcard content
    - Modify stored records
    - Change agent memory
    """

    database_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="memory.db", description="Name of the SQLite database file"
    )
    table_name: str | GraphNode | tuple[GraphNode, str] = Field(
        default="flashcards", description="Name of the table to update"
    )
    data: dict[str, Any] | GraphNode | tuple[GraphNode, str] = Field(
        default={"content": "updated"},
        description="Data to update as dict (column: new_value)",
    )
    where: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="WHERE clause (without 'WHERE' keyword), e.g., 'id = 1'"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.sqlite.Update"
