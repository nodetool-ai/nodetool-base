# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.urllib
from nodetool.workflows.base_node import BaseNode


class EncodeQueryParams(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Encode a dictionary of parameters into a query string using
    ``urllib.parse.urlencode``.
    urllib, query, encode, params

    Use cases:
    - Build GET request URLs
    - Serialize data for APIs
    - Convert parameters to query strings
    """

    params: dict[str, str] | OutputHandle[dict[str, str]] = connect_field(
        default=PydanticUndefined, description="Parameters to encode"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.urllib.EncodeQueryParams

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.urllib
from nodetool.workflows.base_node import BaseNode


class JoinURL(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Join a base URL with a relative URL using ``urllib.parse.urljoin``.
    urllib, join, url

    Use cases:
    - Build absolute links from relative paths
    - Combine API base with endpoints
    - Resolve resources from a base URL
    """

    base: str | OutputHandle[str] = connect_field(default="", description="Base URL")
    url: str | OutputHandle[str] = connect_field(
        default="", description="Relative or absolute URL"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.urllib.JoinURL

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.urllib
from nodetool.workflows.base_node import BaseNode


class ParseURL(SingleOutputGraphNode[dict], GraphNode[dict]):
    """
    Parse a URL into its components using ``urllib.parse.urlparse``.
    urllib, parse, url

    Use cases:
    - Inspect links for validation
    - Extract host or path information
    - Analyze query parameters
    """

    url: str | OutputHandle[str] = connect_field(default="", description="URL to parse")

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.urllib.ParseURL

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.urllib
from nodetool.workflows.base_node import BaseNode


class QuoteURL(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Percent-encode a string for safe use in URLs using ``urllib.parse.quote``.
    urllib, quote, encode

    Use cases:
    - Escape spaces or special characters
    - Prepare text for query parameters
    - Encode file names in URLs
    """

    text: str | OutputHandle[str] = connect_field(
        default="", description="Text to quote"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.urllib.QuoteURL

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.urllib
from nodetool.workflows.base_node import BaseNode


class UnquoteURL(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Decode a percent-encoded URL string using ``urllib.parse.unquote``.
    urllib, unquote, decode

    Use cases:
    - Convert encoded URLs to readable form
    - Parse user input from URLs
    - Display unescaped paths
    """

    text: str | OutputHandle[str] = connect_field(
        default="", description="Encoded text"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.urllib.UnquoteURL

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
