# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.random
from nodetool.workflows.base_node import BaseNode


class RandomBool(SingleOutputGraphNode[bool], GraphNode[bool]):
    """
    Return a random boolean value.
    random, boolean, coinflip, bool

    Use cases:
    - Make random yes/no decisions
    - Simulate coin flips
    - Introduce randomness in control flow
    """

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.random.RandomBool

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.random
from nodetool.workflows.base_node import BaseNode


class RandomChoice(SingleOutputGraphNode[Any], GraphNode[Any]):
    """
    Select a random element from a list.
    random, choice, select, pick

    Use cases:
    - Choose a random sample from options
    - Implement simple lottery behaviour
    - Pick a random item from user input
    """

    options: list[Any] | OutputHandle[list[Any]] = connect_field(
        default=[], description="List of options"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.random.RandomChoice

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.random
from nodetool.workflows.base_node import BaseNode


class RandomFloat(SingleOutputGraphNode[float], GraphNode[float]):
    """
    Generate a random floating point number within a range.
    random, float, number, rand, uniform

    Use cases:
    - Create random probabilities
    - Generate noisy data for testing
    - Produce random values for simulations
    """

    minimum: float | OutputHandle[float] = connect_field(
        default=0.0, description="Minimum value"
    )
    maximum: float | OutputHandle[float] = connect_field(
        default=1.0, description="Maximum value"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.random.RandomFloat

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.random
from nodetool.workflows.base_node import BaseNode


class RandomInt(SingleOutputGraphNode[int], GraphNode[int]):
    """
    Generate a random integer within a range.
    random, integer, number, rand, randint

    Use cases:
    - Pick a random index or identifier
    - Create randomized counters or IDs
    - Sample integers for testing
    """

    minimum: int | OutputHandle[int] = connect_field(
        default=0, description="Minimum value (inclusive)"
    )
    maximum: int | OutputHandle[int] = connect_field(
        default=100, description="Maximum value (inclusive)"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.random.RandomInt

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
