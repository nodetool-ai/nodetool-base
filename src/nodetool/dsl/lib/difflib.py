# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.difflib


class GetCloseMatches(GraphNode[list[str]]):
    """
    Finds close matches for a word within a list of possibilities.
    difflib, fuzzy, match

    Use cases:
    - Suggest alternatives for misspelled words
    - Map user input to valid options
    - Provide recommendations based on partial text
    """

    word: str | OutputHandle[str] = connect_field(
        default="", description="Word to match"
    )
    possibilities: list[str] | OutputHandle[list[str]] = connect_field(
        default=[], description="List of possible words"
    )
    n: int | OutputHandle[int] = connect_field(
        default=3, description="Maximum number of matches to return"
    )
    cutoff: float | OutputHandle[float] = connect_field(
        default=0.6, description="Minimum similarity ratio"
    )

    @property
    def output(self) -> OutputHandle[list[str]]:
        return typing.cast(OutputHandle[list[str]], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.difflib.GetCloseMatches"


GetCloseMatches.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.difflib


class SimilarityRatio(GraphNode[float]):
    """
    Calculates the similarity ratio between two strings.
    difflib, similarity, ratio, compare

    Use cases:
    - Fuzzy string matching
    - Compare document versions
    - Evaluate similarity of user input
    """

    a: str | OutputHandle[str] = connect_field(
        default="", description="First string to compare"
    )
    b: str | OutputHandle[str] = connect_field(
        default="", description="Second string to compare"
    )

    @property
    def output(self) -> OutputHandle[float]:
        return typing.cast(OutputHandle[float], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.difflib.SimilarityRatio"


SimilarityRatio.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.difflib


class UnifiedDiff(GraphNode[str]):
    """
    Generates a unified diff between two texts.
    difflib, diff, compare

    Use cases:
    - Display differences between versions of text files
    - Highlight changes in user submitted documents
    - Compare code snippets
    """

    a: str | OutputHandle[str] = connect_field(default="", description="Original text")
    b: str | OutputHandle[str] = connect_field(default="", description="Modified text")
    fromfile: str | OutputHandle[str] = connect_field(
        default="a", description="Name of the original file"
    )
    tofile: str | OutputHandle[str] = connect_field(
        default="b", description="Name of the modified file"
    )
    lineterm: str | OutputHandle[str] = connect_field(
        default="\n", description="Line terminator"
    )

    @property
    def output(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.difflib.UnifiedDiff"


UnifiedDiff.model_rebuild(force=True)
