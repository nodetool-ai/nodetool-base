# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.hashlib
from nodetool.workflows.base_node import BaseNode


class HashFile(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Compute the cryptographic hash of a file.
        hash, hashlib, digest, file

        Use cases:
        - Verify downloaded files
        - Detect file changes
        - Identify duplicates
    """

    file: str | OutputHandle[str] = connect_field(
        default="", description="The file to hash"
    )
    algorithm: str | OutputHandle[str] = connect_field(
        default="md5", description="Hash algorithm name (e.g. md5, sha1, sha256)"
    )
    chunk_size: int | OutputHandle[int] = connect_field(
        default=8192, description="Read size for hashing in bytes"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.hashlib.HashFile

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.hashlib
from nodetool.workflows.base_node import BaseNode


class HashString(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Compute the cryptographic hash of a string using hashlib.
        hash, hashlib, digest, string

        Use cases:
        - Generate deterministic identifiers
        - Verify data integrity
        - Create fingerprints for caching
    """

    text: str | OutputHandle[str] = connect_field(
        default="", description="The text to hash"
    )
    algorithm: str | OutputHandle[str] = connect_field(
        default="md5", description="Hash algorithm name (e.g. md5, sha1, sha256)"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.hashlib.HashString

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
