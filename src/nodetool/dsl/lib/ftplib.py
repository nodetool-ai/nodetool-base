# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.ftplib


class FTPDownloadFile(GraphNode[types.DocumentRef]):
    """Download a file from an FTP server.
    ftp, download, file

    Use cases:
    - Retrieve remote files for processing
    - Backup data from an FTP server
    - Integrate legacy FTP systems
    """

    host: str | OutputHandle[str] = connect_field(
        default="", description="FTP server host"
    )
    username: str | OutputHandle[str] = connect_field(
        default="", description="Username for authentication"
    )
    password: str | OutputHandle[str] = connect_field(
        default="", description="Password for authentication"
    )
    remote_path: str | OutputHandle[str] = connect_field(
        default="", description="Remote file path to download"
    )

    @property
    def output(self) -> OutputHandle[types.DocumentRef]:
        return typing.cast(
            OutputHandle[types.DocumentRef], self._single_output_handle()
        )

    @classmethod
    def get_node_type(cls):
        return "lib.ftplib.FTPDownloadFile"


FTPDownloadFile.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.ftplib


class FTPListDirectory(GraphNode[list[str]]):
    """List files in a directory on an FTP server.
    ftp, list, directory

    Use cases:
    - Browse remote directories
    - Check available files before download
    - Monitor FTP server contents
    """

    host: str | OutputHandle[str] = connect_field(
        default="", description="FTP server host"
    )
    username: str | OutputHandle[str] = connect_field(
        default="", description="Username for authentication"
    )
    password: str | OutputHandle[str] = connect_field(
        default="", description="Password for authentication"
    )
    directory: str | OutputHandle[str] = connect_field(
        default="", description="Remote directory to list"
    )

    @property
    def output(self) -> OutputHandle[list[str]]:
        return typing.cast(OutputHandle[list[str]], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.ftplib.FTPListDirectory"


FTPListDirectory.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.ftplib


class FTPUploadFile(GraphNode[NoneType]):
    """Upload a file to an FTP server.
    ftp, upload, file

    Use cases:
    - Transfer files to an FTP server
    - Automate backups to a remote system
    - Integrate with legacy FTP workflows
    """

    host: str | OutputHandle[str] = connect_field(
        default="", description="FTP server host"
    )
    username: str | OutputHandle[str] = connect_field(
        default="", description="Username for authentication"
    )
    password: str | OutputHandle[str] = connect_field(
        default="", description="Password for authentication"
    )
    remote_path: str | OutputHandle[str] = connect_field(
        default="", description="Remote file path to upload to"
    )
    document: types.DocumentRef | OutputHandle[types.DocumentRef] = connect_field(
        default=types.DocumentRef(type="document", uri="", asset_id=None, data=None),
        description="Document to upload",
    )

    @property
    def output(self) -> OutputHandle[NoneType]:
        return typing.cast(OutputHandle[NoneType], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.ftplib.FTPUploadFile"


FTPUploadFile.model_rebuild(force=True)
