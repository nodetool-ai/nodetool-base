# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode


class AddTimeDelta(GraphNode):
    """
    Add or subtract time from a datetime.
    datetime, add, subtract

    Use cases:
    - Calculate future/past dates
    - Generate date ranges
    """

    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Starting datetime",
    )
    days: int | GraphNode | tuple[GraphNode, str] = Field(
        default=0, description="Number of days to add (negative to subtract)"
    )
    hours: int | GraphNode | tuple[GraphNode, str] = Field(
        default=0, description="Number of hours to add (negative to subtract)"
    )
    minutes: int | GraphNode | tuple[GraphNode, str] = Field(
        default=0, description="Number of minutes to add (negative to subtract)"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.AddTimeDelta"


import nodetool.nodes.lib.date
import nodetool.nodes.lib.date


class BoundaryTime(GraphNode):
    """
    Get the start or end of a time period (day, week, month, year).
    datetime, start, end, boundary, day, week, month, year

    Use cases:
    - Get period boundaries for reporting
    - Normalize dates to period starts/ends
    """

    PeriodType: typing.ClassVar[type] = nodetool.nodes.lib.date.PeriodType
    BoundaryType: typing.ClassVar[type] = nodetool.nodes.lib.date.BoundaryType
    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Input datetime",
    )
    period: nodetool.nodes.lib.date.PeriodType = Field(
        default=nodetool.nodes.lib.date.PeriodType.DAY, description="Time period type"
    )
    boundary: nodetool.nodes.lib.date.BoundaryType = Field(
        default=nodetool.nodes.lib.date.BoundaryType.START,
        description="Start or end of period",
    )
    start_monday: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=True,
        description="For week period: Consider Monday as start of week (False for Sunday)",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.BoundaryTime"


class DateDifference(GraphNode):
    """
    Calculate the difference between two dates.
    datetime, difference, duration

    Use cases:
    - Calculate time periods
    - Measure durations
    """

    start_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Start datetime",
    )
    end_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="End datetime",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.DateDifference"


class DateRange(GraphNode):
    """
    Generate a list of dates between start and end dates.
    datetime, range, list

    Use cases:
    - Generate date sequences
    - Create date-based iterations
    """

    start_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Start date of the range",
    )
    end_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="End date of the range",
    )
    step_days: int | GraphNode | tuple[GraphNode, str] = Field(
        default=1, description="Number of days between each date"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.DateRange"


class DateToDatetime(GraphNode):
    """
    Convert a Date object to a Datetime object.
    date, datetime, convert
    """

    input_date: types.Date | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Date(type="date", year=0, month=0, day=0),
        description="Date to convert",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.DateToDatetime"


class DatetimeToDate(GraphNode):
    """
    Convert a Datetime object to a Date object.
    date, datetime, convert
    """

    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Datetime to convert",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.DatetimeToDate"


import nodetool.nodes.lib.date


class FormatDateTime(GraphNode):
    """
    Convert a datetime object to a formatted string.
    datetime, format, convert

    Use cases:
    - Standardize date formats
    - Prepare dates for different systems
    """

    DateFormat: typing.ClassVar[type] = nodetool.nodes.lib.date.DateFormat
    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Datetime object to format",
    )
    output_format: nodetool.nodes.lib.date.DateFormat = Field(
        default=nodetool.nodes.lib.date.DateFormat.HUMAN_READABLE,
        description="Desired output format",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.FormatDateTime"


class GetQuarter(GraphNode):
    """
    Get the quarter number and start/end dates for a given datetime.
    datetime, quarter, period

    Use cases:
    - Financial reporting periods
    - Quarterly analytics
    """

    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Input datetime",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.GetQuarter"


class GetWeekday(GraphNode):
    """
    Get the weekday name or number from a datetime.
    datetime, weekday, name

    Use cases:
    - Get day names for scheduling
    - Filter events by weekday
    """

    input_datetime: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Input datetime",
    )
    as_name: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=True, description="Return weekday name instead of number (0-6)"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.GetWeekday"


class IsDateInRange(GraphNode):
    """
    Check if a date falls within a specified range.
    datetime, range, check

    Use cases:
    - Validate date ranges
    - Filter date-based data
    """

    check_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Date to check",
    )
    start_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="Start of date range",
    )
    end_date: types.Datetime | GraphNode | tuple[GraphNode, str] = Field(
        default=types.Datetime(
            type="datetime",
            year=0,
            month=0,
            day=0,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo="UTC",
            utc_offset=0,
        ),
        description="End of date range",
    )
    inclusive: bool | GraphNode | tuple[GraphNode, str] = Field(
        default=True, description="Include start and end dates in range"
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.IsDateInRange"


class Now(GraphNode):
    """
    Get the current date and time.
    datetime, current, now
    """

    @classmethod
    def get_node_type(cls):
        return "lib.date.Now"


import nodetool.nodes.lib.date


class ParseDate(GraphNode):
    """
    Parse a date string into components.
    date, parse, format
    """

    DateFormat: typing.ClassVar[type] = nodetool.nodes.lib.date.DateFormat
    date_string: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The date string to parse"
    )
    input_format: nodetool.nodes.lib.date.DateFormat = Field(
        default=nodetool.nodes.lib.date.DateFormat.ISO,
        description="Format of the input date string",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.ParseDate"


import nodetool.nodes.lib.date


class ParseDateTime(GraphNode):
    """
    Parse a date/time string into components.
    datetime, parse, format

    Use cases:
    - Extract date components from strings
    - Convert between date formats
    """

    DateFormat: typing.ClassVar[type] = nodetool.nodes.lib.date.DateFormat
    datetime_string: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The datetime string to parse"
    )
    input_format: nodetool.nodes.lib.date.DateFormat = Field(
        default=nodetool.nodes.lib.date.DateFormat.ISO,
        description="Format of the input datetime string",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.ParseDateTime"


import nodetool.nodes.lib.date
import nodetool.nodes.lib.date


class RelativeTime(GraphNode):
    """
    Get datetime relative to current time (past or future).
    datetime, past, future, relative, hours, days, months

    Use cases:
    - Calculate past or future dates
    - Generate relative timestamps
    """

    TimeUnitType: typing.ClassVar[type] = nodetool.nodes.lib.date.TimeUnitType
    TimeDirection: typing.ClassVar[type] = nodetool.nodes.lib.date.TimeDirection
    amount: int | GraphNode | tuple[GraphNode, str] = Field(
        default=1, description="Amount of time units"
    )
    unit: nodetool.nodes.lib.date.TimeUnitType = Field(
        default=nodetool.nodes.lib.date.TimeUnitType.DAYS, description="Time unit type"
    )
    direction: nodetool.nodes.lib.date.TimeDirection = Field(
        default=nodetool.nodes.lib.date.TimeDirection.FUTURE,
        description="Past or future",
    )

    @classmethod
    def get_node_type(cls):
        return "lib.date.RelativeTime"


class Today(GraphNode):
    """
    Get the current date.
    date, today, now
    """

    @classmethod
    def get_node_type(cls):
        return "lib.date.Today"
