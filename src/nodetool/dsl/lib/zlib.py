# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.zlib


class Compress(GraphNode[bytes]):
    """
    Compress binary data using the zlib algorithm.
    zlib, compress, deflate, binary

    Use cases:
    - Reduce size of binary data
    - Prepare payloads for transmission
    - Store data in compressed form
    """

    data: bytes | OutputHandle[bytes] = connect_field(
        default=b"", description="Data to compress"
    )
    level: int | OutputHandle[int] = connect_field(
        default=9, description="Compression level"
    )

    @property
    def output(self) -> OutputHandle[bytes]:
        return typing.cast(OutputHandle[bytes], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.zlib.Compress"


Compress.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.zlib


class Decompress(GraphNode[bytes]):
    """
    Decompress zlib-compressed binary data.
    zlib, decompress, inflate, binary

    Use cases:
    - Restore compressed payloads
    - Read previously compressed files
    - Handle zlib streams from external services
    """

    data: bytes | OutputHandle[bytes] = connect_field(
        default=b"", description="Data to decompress"
    )

    @property
    def output(self) -> OutputHandle[bytes]:
        return typing.cast(OutputHandle[bytes], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.zlib.Decompress"


Decompress.model_rebuild(force=True)
