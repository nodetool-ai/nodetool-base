# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.bytes


class LoadBytesFile(GraphNode[bytes]):
    """
    Read raw bytes from a file on disk.
    files, bytes, read, input, load, file

    Use cases:
    - Load binary data for processing
    - Read binary files for a workflow
    """

    path: str | OutputHandle[str] = connect_field(
        default="", description="Path to the file to read"
    )

    @property
    def output(self) -> OutputHandle[bytes]:
        return typing.cast(OutputHandle[bytes], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.bytes.LoadBytesFile"


LoadBytesFile.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.bytes


class SaveBytesFile(GraphNode[typing.Any]):
    """
    Write raw bytes to a file on disk.
    files, bytes, save, output

    The filename can include time and date variables:
    %Y - Year, %m - Month, %d - Day
    %H - Hour, %M - Minute, %S - Second
    """

    data: bytes | OutputHandle[bytes] | None = connect_field(
        default=None, description="The bytes to write to file"
    )
    folder: str | OutputHandle[str] = connect_field(
        default="", description="Folder where the file will be saved"
    )
    filename: str | OutputHandle[str] = connect_field(
        default="",
        description="Name of the file to save. Supports strftime format codes.",
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.bytes.SaveBytesFile"


SaveBytesFile.model_rebuild(force=True)
