# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.rss


class ExtractFeedMetadata(GraphNode[dict]):
    """
    Extracts metadata from an RSS feed.
    rss, metadata, feed

    Use cases:
    - Get feed information
    - Validate feed details
    - Extract feed metadata
    """

    url: str | OutputHandle[str] = connect_field(
        default="", description="URL of the RSS feed"
    )

    @property
    def output(self) -> OutputHandle[dict]:
        return typing.cast(OutputHandle[dict], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.rss.ExtractFeedMetadata"


ExtractFeedMetadata.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.rss


class FetchRSSFeed(GraphNode[nodetool.nodes.lib.rss.FetchRSSFeed.OutputType]):
    """
    Fetches and parses an RSS feed from a URL.
    rss, feed, network

    Use cases:
    - Monitor news feeds
    - Aggregate content from multiple sources
    - Process blog updates
    """

    url: str | OutputHandle[str] = connect_field(
        default="", description="URL of the RSS feed to fetch"
    )

    @property
    def out(self) -> "FetchRSSFeedOutputs":
        return FetchRSSFeedOutputs(self)

    @classmethod
    def get_node_type(cls):
        return "lib.rss.FetchRSSFeed"


class FetchRSSFeedOutputs(OutputsProxy):
    @property
    def title(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self["title"])

    @property
    def link(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self["link"])

    @property
    def published(self) -> OutputHandle[types.Datetime]:
        return typing.cast(OutputHandle[types.Datetime], self["published"])

    @property
    def summary(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self["summary"])

    @property
    def author(self) -> OutputHandle[str]:
        return typing.cast(OutputHandle[str], self["author"])


FetchRSSFeed.model_rebuild(force=True)
