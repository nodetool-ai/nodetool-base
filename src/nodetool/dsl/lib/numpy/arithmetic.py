# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic
from nodetool.workflows.base_node import BaseNode


class AddArray(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    """
    Performs addition on two arrays.
    math, plus, add, addition, sum, +
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.arithmetic.AddArray

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.utils
from nodetool.workflows.base_node import BaseNode


class BinaryOperation(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.utils.BinaryOperation

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic
from nodetool.workflows.base_node import BaseNode


class DivideArray(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    """
    Divides the first array by the second.
    math, division, arithmetic, quotient, /
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.arithmetic.DivideArray

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic
from nodetool.workflows.base_node import BaseNode


class ModulusArray(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    """
    Calculates the element-wise remainder of division.
    math, modulo, remainder, mod, %

    Use cases:
    - Implementing cyclic behaviors
    - Checking for even/odd numbers
    - Limiting values to a specific range
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.arithmetic.ModulusArray

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic
from nodetool.workflows.base_node import BaseNode


class MultiplyArray(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    """
    Multiplies two arrays.
    math, product, times, *
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.arithmetic.MultiplyArray

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic
from nodetool.workflows.base_node import BaseNode


class SubtractArray(
    SingleOutputGraphNode[int | float | nodetool.metadata.types.NPArray],
    GraphNode[int | float | nodetool.metadata.types.NPArray],
):
    """
    Subtracts the second array from the first.
    math, minus, difference, -
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.numpy.arithmetic.SubtractArray

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
