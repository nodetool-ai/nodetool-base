# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic


class AddArray(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    """
    Performs addition on two arrays.
    math, plus, add, addition, sum, +
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.arithmetic.AddArray"


AddArray.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.utils


class BinaryOperation(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.utils.BinaryOperation"


BinaryOperation.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic


class DivideArray(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    """
    Divides the first array by the second.
    math, division, arithmetic, quotient, /
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.arithmetic.DivideArray"


DivideArray.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic


class ModulusArray(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    """
    Calculates the element-wise remainder of division.
    math, modulo, remainder, mod, %

    Use cases:
    - Implementing cyclic behaviors
    - Checking for even/odd numbers
    - Limiting values to a specific range
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.arithmetic.ModulusArray"


ModulusArray.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic


class MultiplyArray(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    """
    Multiplies two arrays.
    math, product, times, *
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.arithmetic.MultiplyArray"


MultiplyArray.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.numpy.arithmetic


class SubtractArray(GraphNode[int | float | nodetool.metadata.types.NPArray]):
    """
    Subtracts the second array from the first.
    math, minus, difference, -
    """

    a: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)
    b: (
        int
        | float
        | nodetool.metadata.types.NPArray
        | OutputHandle[int | float | nodetool.metadata.types.NPArray]
    ) = connect_field(default=0.0, description=None)

    @property
    def output(self) -> OutputHandle[int | float | nodetool.metadata.types.NPArray]:
        return typing.cast(
            OutputHandle[int | float | nodetool.metadata.types.NPArray],
            self._single_output_handle(),
        )

    @classmethod
    def get_node_type(cls):
        return "lib.numpy.arithmetic.SubtractArray"


SubtractArray.model_rebuild(force=True)
