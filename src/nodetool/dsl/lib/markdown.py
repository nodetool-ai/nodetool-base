# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractBulletLists(GraphNode[typing.Any]):
    """
    Extracts bulleted lists from markdown.
    markdown, lists, bullets, extraction

    Use cases:
    - Extract unordered list items
    - Analyze bullet point structures
    - Convert bullet lists to structured data
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractBulletLists"


ExtractBulletLists.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractCodeBlocks(GraphNode[typing.Any]):
    """
    Extracts code blocks and their languages from markdown.
    markdown, code, extraction

    Use cases:
    - Extract code samples for analysis
    - Collect programming examples
    - Analyze code snippets in documentation
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractCodeBlocks"


ExtractCodeBlocks.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractHeaders(GraphNode[typing.Any]):
    """
    Extracts headers and creates a document structure/outline.
    markdown, headers, structure

    Use cases:
    - Generate table of contents
    - Analyze document structure
    - Extract main topics from documents
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )
    max_level: int | OutputHandle[int] = connect_field(
        default=6, description="Maximum header level to extract (1-6)"
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractHeaders"


ExtractHeaders.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractLinks(GraphNode[typing.Any]):
    """
    Extracts all links from markdown text.
    markdown, links, extraction

    Use cases:
    - Extract references and citations from academic documents
    - Build link graphs from markdown documentation
    - Analyze external resources referenced in markdown files
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )
    include_titles: bool | OutputHandle[bool] = connect_field(
        default=True, description="Whether to include link titles in output"
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractLinks"


ExtractLinks.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractNumberedLists(GraphNode[typing.Any]):
    """
    Extracts numbered lists from markdown.
    markdown, lists, numbered, extraction

    Use cases:
    - Extract ordered list items
    - Analyze enumerated structures
    - Convert numbered lists to structured data
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )

    @property
    def output(self) -> OutputHandle[typing.Any]:
        return typing.cast(OutputHandle[typing.Any], self._single_output_handle())

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractNumberedLists"


ExtractNumberedLists.model_rebuild(force=True)


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.markdown


class ExtractTables(GraphNode[types.DataframeRef]):
    """
    Extracts tables from markdown and converts them to structured data.
    markdown, tables, data

    Use cases:
    - Extract tabular data from markdown
    - Convert markdown tables to structured formats
    - Analyze tabulated information
    """

    markdown: str | OutputHandle[str] = connect_field(
        default="", description="The markdown text to analyze"
    )

    @property
    def output(self) -> OutputHandle[types.DataframeRef]:
        return typing.cast(
            OutputHandle[types.DataframeRef], self._single_output_handle()
        )

    @classmethod
    def get_node_type(cls):
        return "lib.markdown.ExtractTables"


ExtractTables.model_rebuild(force=True)
