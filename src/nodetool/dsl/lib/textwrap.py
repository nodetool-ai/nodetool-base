# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.textwrap
from nodetool.workflows.base_node import BaseNode


class Dedent(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Removes any common leading whitespace from every line in text.
    textwrap, dedent, whitespace
    """

    text: str | OutputHandle[str] = connect_field(default="", description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.textwrap.Dedent

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.textwrap
from nodetool.workflows.base_node import BaseNode


class Fill(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Wraps text to a specified width, returning a formatted string.
    textwrap, fill, wrap
    """

    text: str | OutputHandle[str] = connect_field(default="", description=None)
    width: int | OutputHandle[int] = connect_field(default=70, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.textwrap.Fill

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.textwrap
from nodetool.workflows.base_node import BaseNode


class Indent(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Adds a prefix to the beginning of each line in the text.
    textwrap, indent, prefix
    """

    text: str | OutputHandle[str] = connect_field(default="", description=None)
    prefix: str | OutputHandle[str] = connect_field(default="    ", description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.textwrap.Indent

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.textwrap
from nodetool.workflows.base_node import BaseNode


class Shorten(SingleOutputGraphNode[str], GraphNode[str]):
    """
    Shortens text to fit within a width, using a placeholder if truncated.
    textwrap, shorten, truncate
    """

    text: str | OutputHandle[str] = connect_field(default="", description=None)
    width: int | OutputHandle[int] = connect_field(default=70, description=None)
    placeholder: str | OutputHandle[str] = connect_field(
        default="...", description=None
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.textwrap.Shorten

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.lib.textwrap
from nodetool.workflows.base_node import BaseNode


class Wrap(SingleOutputGraphNode[list[str]], GraphNode[list[str]]):
    """
    Wraps text to a specified width, returning a list of lines.
    textwrap, wrap, lines
    """

    text: str | OutputHandle[str] = connect_field(default="", description=None)
    width: int | OutputHandle[int] = connect_field(default=70, description=None)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.lib.textwrap.Wrap

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
