# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode

import nodetool.nodes.gemini.image


class ImageGeneration(GraphNode):
    """
    Generate an image using Google's Imagen model via the Gemini API.
    google, image generation, ai, imagen

    Use cases:
    - Create images from text descriptions
    - Generate assets for creative projects
    - Explore AI-powered image synthesis
    """

    ImageGenerationModel: typing.ClassVar[type] = (
        nodetool.nodes.gemini.image.ImageGenerationModel
    )
    prompt: str | GraphNode | tuple[GraphNode, str] = Field(
        default="", description="The text prompt describing the image to generate."
    )
    model: nodetool.nodes.gemini.image.ImageGenerationModel = Field(
        default=nodetool.nodes.gemini.image.ImageGenerationModel.IMAGEN_3_0_GENERATE_002,
        description="The image generation model to use",
    )
    image: types.ImageRef | GraphNode | tuple[GraphNode, str] = Field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The image to use as a base for the generation.",
    )

    @classmethod
    def get_node_type(cls):
        return "gemini.image.ImageGeneration"
