# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.gemini.text
from nodetool.workflows.base_node import BaseNode


class GroundedSearch(GraphNode[nodetool.nodes.gemini.text.GroundedSearch.OutputType]):
    """

    Search the web using Google's Gemini API with grounding capabilities.
    google, search, grounded, web, gemini, ai

    This node uses Google's Gemini API to perform web searches and return structured results
    with source information. Requires a Gemini API key.

    Use cases:
    - Research current events and latest information
    - Find reliable sources for fact-checking
    - Gather web-based information with citations
    - Get up-to-date information beyond the model's training data
    """

    GeminiModel: typing.ClassVar[type] = nodetool.nodes.gemini.text.GeminiModel

    query: str | OutputHandle[str] = connect_field(
        default="", description="The search query to execute"
    )
    model: nodetool.nodes.gemini.text.GeminiModel = Field(
        default=nodetool.nodes.gemini.text.GeminiModel.GEMINI_2_0_FLASH,
        description="The Gemini model to use for search",
    )

    @property
    def out(self) -> "GroundedSearchOutputs":
        return GroundedSearchOutputs(self)

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.gemini.text.GroundedSearch

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


class GroundedSearchOutputs(OutputsProxy):
    @property
    def results(self) -> OutputHandle[list[str]]:
        return typing.cast(OutputHandle[list[str]], self["results"])

    @property
    def sources(self) -> OutputHandle[list[types.Source]]:
        return typing.cast(OutputHandle[list[types.Source]], self["sources"])
